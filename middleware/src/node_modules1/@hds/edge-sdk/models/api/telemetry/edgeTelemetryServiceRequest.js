"use strict";
/**
 * @module Telemetry
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EdgeRtVariableConfig = exports.EdgeTelemetryRequest = exports.EdgeRtPublishMode = exports.EdgeRtDestination = exports.EdgeRtSource = exports.EdgeRtVariableMode = exports.EdgeRtMode = exports.MQTTSourceConfig = exports.CalculatedSourceConfig = exports.PersistencePublisherConfig = exports.MQTTPublisherConfig = exports.RMQPublisherConfig = exports.PublisherConfigBase = exports.RMQSourceConfig = void 0;
/**
 * Configuration for a RabbitMQ Streaming Data Source
 */
class RMQSourceConfig {
    /**
     * Constructs a RMQSourceConfig Object
     * @param exchange The exchange to subscribe to
     * @param exchangeType The corresponding exchange type to the subscribed exchange.
     * Must be one of the following: 'fanout', 'direct', or 'topic'
     * @param durable Should the exchange persist past the lifecycle of connections to it
     * @param routingKey The routing key that data should be subscribed from. Only compatible with Topic and Direct exchange types
     */
    constructor(exchange, exchangeType, durable, routingKey) {
        /**
         * The type of data source to stream data from to the telemetry service.
         * This property is readonly
         */
        this.type = EdgeRtSource.RMQ;
        /**
         * Sets whether the queue can only be used by this service or other services can share it.
         */
        this.queueExclusive = true;
        this.exchange = exchange;
        this.exchangeType = exchangeType;
        this.durable = durable;
        this.routingKey = routingKey;
    }
}
exports.RMQSourceConfig = RMQSourceConfig;
/**
 * The abstract base class for publisher configuration.
 * Contains common properties for publisher configuration
 */
class PublisherConfigBase {
    constructor() {
        /**
         * The mode in which to publish data.
         * If unset, defaults to ALWAYS
         */
        this.mode = EdgeRtPublishMode.ALWAYS;
    }
}
exports.PublisherConfigBase = PublisherConfigBase;
/**
 * Configuration for a RabbitMQ publisher
 * This is not currently compatible with the EdgeSDK and should only be used by applications
 * with independent RabbitMQ connections and the Edge API
 */
class RMQPublisherConfig extends PublisherConfigBase {
    /**
     * Constructs a RMQPublisherConfig Object
     * @param exchange The exchange to publish to
     * @param exchangeType The corresponding exchange type to the publish exchange.
     * Must be one of the following: 'fanout', 'direct', or 'topic'
     * @param durable Should the exchange persist past the lifecycle of connections to it
     * @param routingKey The routing key that data should be subscribed from. Only compatible with Topic and Direct exchange types
     */
    constructor(exchange, exchangeType, durable, routingKey) {
        super();
        /**
         * The type of data source to stream data from to the telemetry service
         * This property is readonly
         */
        this.type = EdgeRtDestination.RMQ;
        this.exchange = exchange;
        this.exchangeType = exchangeType;
        this.durable = durable;
        this.routingKey = routingKey;
    }
}
exports.RMQPublisherConfig = RMQPublisherConfig;
/**
 * Configuration for an MQTT Publisher
 */
class MQTTPublisherConfig extends PublisherConfigBase {
    /**
     * Constructs a MQTTPublisherConfig
     * @param topic The mqtt topic to publish to. If unset, this will be dynamically generated
     */
    constructor(topic) {
        super();
        /**
         * The publisher type. This is a readonly property
         */
        this.type = EdgeRtDestination.MQTT;
        this.topic = topic;
    }
}
exports.MQTTPublisherConfig = MQTTPublisherConfig;
/**
 * @hidden
 * Not Implemented
 */
class PersistencePublisherConfig extends PublisherConfigBase {
    constructor() {
        super();
        this.type = EdgeRtDestination.PERSIST;
        this.descriptor = '';
        this.isWellBased = false;
    }
}
exports.PersistencePublisherConfig = PersistencePublisherConfig;
/**
 * Calculated sources take the output of coerced variables and apply a function
 */
class CalculatedSourceConfig {
    constructor() {
        /**
         * The source type. This is a readonly property
         */
        this.type = EdgeRtSource.CALC;
    }
}
exports.CalculatedSourceConfig = CalculatedSourceConfig;
/**
 * Configuration for an MQTT Data Source
 */
class MQTTSourceConfig {
    constructor(topic) {
        /**
         * The source type. This is a readonly property
         */
        this.type = EdgeRtSource.MQTT;
        this.topic = topic;
    }
}
exports.MQTTSourceConfig = MQTTSourceConfig;
/**
 * This is currently unused
 */
var EdgeRtMode;
(function (EdgeRtMode) {
    EdgeRtMode["RAW"] = "RAW";
    EdgeRtMode["PROCESSED"] = "PROCESSED";
})(EdgeRtMode = exports.EdgeRtMode || (exports.EdgeRtMode = {}));
/**
 * The Modes in which RT Variables can be coerced
 */
var EdgeRtVariableMode;
(function (EdgeRtVariableMode) {
    /**
     * Take the average of all values received since the last publish interval
     */
    EdgeRtVariableMode["AVG"] = "AVG";
    /**
     * Take the latest value received.
     */
    EdgeRtVariableMode["LAST"] = "LAST";
    /**
     * Perform a calculation based on the output of coercion of other RT Variables.
     * Calculated Variables cannot be consumed by other calculations
     */
    EdgeRtVariableMode["CALC"] = "CALC";
})(EdgeRtVariableMode = exports.EdgeRtVariableMode || (exports.EdgeRtVariableMode = {}));
/**
 * The types of RT Sources available
 */
var EdgeRtSource;
(function (EdgeRtSource) {
    /**
     * RabbitMQ
     */
    EdgeRtSource["RMQ"] = "RMQ";
    /**
     * MQTT. Must be used for SDK.
     */
    EdgeRtSource["MQTT"] = "MQTT";
    /**
     * Calculated Value. Uses RMQ/MQTT source variables
     */
    EdgeRtSource["CALC"] = "CALC";
    //CONST = "CONST" //future support constant values for use in calcs
})(EdgeRtSource = exports.EdgeRtSource || (exports.EdgeRtSource = {}));
var EdgeRtDestination;
(function (EdgeRtDestination) {
    /**
     * RabbitMQ
     */
    EdgeRtDestination["RMQ"] = "RMQ";
    /**
     * MQTT. Must be used for SDK.
     */
    EdgeRtDestination["MQTT"] = "MQTT";
    /**
     * Not Yet Implemented in the telemetry service.
     * Publish to Historian.
     */
    EdgeRtDestination["PERSIST"] = "PERSIST";
})(EdgeRtDestination = exports.EdgeRtDestination || (exports.EdgeRtDestination = {}));
/**
 * The available modes to publish data from the telemetry service
 */
var EdgeRtPublishMode;
(function (EdgeRtPublishMode) {
    /**
     * Always publish on publish interval
     */
    EdgeRtPublishMode["ALWAYS"] = "ALWAYS";
    /**
     * Check values on publish interval, only publish when new data received
     */
    EdgeRtPublishMode["CHANGE"] = "CHANGE";
})(EdgeRtPublishMode = exports.EdgeRtPublishMode || (exports.EdgeRtPublishMode = {}));
/**
 * Request options for configuring telemetry
 */
class EdgeTelemetryRequest {
    /**
     * construct an EdgeTelemetryRequest object
     */
    constructor() {
        /**
         * A list of streaming data sources that are inputs to the telemetry service
         */
        this.dataSources = [];
        /**
         * The rate at which the telemetry service will perform coercion/calculations and publish data
         * If unset, uses the telemetry service default publish interval of 1000ms
         */
        this.publishInterval = 1000;
        /**
         * This property is unused and will be ignored
         */
        this.mode = EdgeRtMode.PROCESSED;
        /**
         * This propery is not compatible with the SDK and will be forced to false
         * Makes the telemetry service persistent.
         */
        this.persistent = false;
    }
}
exports.EdgeTelemetryRequest = EdgeTelemetryRequest;
/**
 * RT Variable Configuration for a data source in the telemetry service
 */
class EdgeRtVariableConfig {
    /**
     * Constructs an EdgeRtVariableConfig object
     */
    constructor() {
        /**
         * The coercion/calc mode for the variable.
         */
        this.mode = EdgeRtVariableMode.AVG;
        /**
         * Sets whether the signal should be broadcast by the publisher or not
         * This is useful when an input is used in a calculation, but is not needed by the external service subscribing to the telemetry data.
         * Defaults to true if unset.
         */
        this.publish = true;
        /**
         * Sets the timeout in milliseconds before a value expires and starts broadcasting using its default value
         */
        this.lastValueTimeout = undefined;
        /**
         * Sets the default value to use when either a value has not been received or the timeout expires for a variable.
         * If unset, defaults to null
         */
        this.defaultValue = undefined;
    }
}
exports.EdgeRtVariableConfig = EdgeRtVariableConfig;
