"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EdgeIoTPersistenceService = void 0;
const iot_management_db_1 = require("../../db/iot-management.db");
const iotManagementDB_model_1 = require("./../../db/iotManagementDB.model");
class EdgeIoTPersistenceService {
    constructor(dbConnection) {
        this.merge = (a, b, p) => a.filter((aa) => !b.find((bb) => aa[p] === bb[p])).concat(b);
        this.filter = (a, b, p) => a.filter((aa) => !b.find((bb) => aa[p] === bb[p]));
        this.db = new iot_management_db_1.IotManagementDB(dbConnection);
        this.ioTModuleModel = {
            timestamp: Date.now(),
            services: new Array(),
            sensors: new Array(),
        };
        this.createDocument();
    }
    async getServices() {
        return this.db.getIoTModule(iotManagementDB_model_1.IoTModuleProperty.Services);
    }
    async getSensors() {
        return this.db.getIoTModule(iotManagementDB_model_1.IoTModuleProperty.Sensors);
    }
    async createDocument() {
        await this.db.isIoTModuleExists().then(async (result) => {
            if (!result) {
                await this.db.setIoTModule(this.ioTModuleModel);
            }
        });
    }
    async addServices(values) {
        if (this.ioTModuleModel) {
            this.ioTModuleModel.timestamp = Date.now();
            this.addOrReplace(values, this.ioTModuleModel.services);
            const dbData = await this.db.getIoTModule(iotManagementDB_model_1.IoTModuleProperty.Services);
            if (dbData && dbData.result) {
                const dbResult = dbData.result;
                const merge = this.merge(dbResult, this.ioTModuleModel.services, 'id');
                this.ioTModuleModel.services = merge;
                await this.db.updateIoTServiceModule(this.ioTModuleModel);
            }
        }
    }
    async addSensors(values) {
        if (this.ioTModuleModel) {
            this.ioTModuleModel.timestamp = Date.now();
            this.addOrReplace(values, this.ioTModuleModel.sensors);
            const dbData = await this.db.getIoTModule(iotManagementDB_model_1.IoTModuleProperty.Sensors);
            if (dbData && dbData.result) {
                const dbResult = dbData.result;
                const merge = this.merge(dbResult, this.ioTModuleModel.sensors, 'id');
                this.ioTModuleModel.sensors = merge;
                await this.db.updateIoTSensorModule(this.ioTModuleModel);
            }
        }
    }
    async removeServices(values) {
        if (!values || values.length < 1 || !this.ioTModuleModel) {
            return;
        }
        this.ioTModuleModel.timestamp = Date.now();
        const dbData = await this.db.getIoTModule(iotManagementDB_model_1.IoTModuleProperty.Services);
        if (dbData && dbData.result) {
            this.ioTModuleModel.services = dbData.result;
            this.ioTModuleModel.services = this.filter(this.ioTModuleModel.services, values, 'id');
            await this.db.updateIoTServiceModule(this.ioTModuleModel);
        }
    }
    async removeSensors(values) {
        if (!values || values.length < 1 || !this.ioTModuleModel) {
            return;
        }
        this.ioTModuleModel.timestamp = Date.now();
        const dbData = await this.db.getIoTModule(iotManagementDB_model_1.IoTModuleProperty.Sensors);
        if (dbData && dbData.result) {
            this.ioTModuleModel.sensors = dbData.result;
            this.ioTModuleModel.sensors = this.filter(this.ioTModuleModel.sensors, values, 'id');
            await this.db.updateIoTSensorModule(this.ioTModuleModel);
        }
    }
    addOrReplace(values, collection) {
        for (const value of values) {
            const index = collection.findIndex((data) => data.id === value.id);
            index !== -1 ? (collection[index] = value) : collection.push(value);
        }
    }
}
exports.EdgeIoTPersistenceService = EdgeIoTPersistenceService;
