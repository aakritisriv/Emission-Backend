import { IResultStatusObject, ResultStatusObject } from '../../models/api/resultStatusObject';
import { IIotManagementFactory } from '../../models/iotManagement/iot-management.factory';
import { IEdgeIotModule, IEdgeIotModuleConfig } from '../../models/iotManagement/iot-management.model';
import { ApiCallsService } from '../api-call.service';
import { IIotConfigProvider } from './iot-config.service';
export declare class IotManagementGenericFactory implements IIotManagementFactory<IEdgeIotModule, IEdgeIotModule, IEdgeIotModuleConfig, IEdgeIotModuleConfig> {
    private apiCallsService;
    private configProvider;
    constructor(apiCallsService: ApiCallsService, configProvider: IIotConfigProvider);
    createSensors(config: IEdgeIotModuleConfig[]): Promise<IResultStatusObject<IEdgeIotModule[]>>;
    createPublishers(config: IEdgeIotModuleConfig[]): Promise<ResultStatusObject<IEdgeIotModule[]>>;
}
//# sourceMappingURL=iot-generic.factory.d.ts.map