"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IotConfigProvider = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const __1 = require("../..");
const module_classes_model_1 = require("../../models/iotManagement/module-classes.model");
class IotConfigProvider {
    constructor(iotConfig) {
        this.iotConfigLocation = process.env.IOT_CONFIG_PATH || 'iot-config.json';
        this.iotConfig = iotConfig;
        try {
            this.iotModulesConfig = this.readConfigFile(this.iotConfigLocation);
        }
        catch (error) {
            // throw error;
            __1.LogService.log(__1.LOG_LEVEL.ERROR, error.message);
        }
    }
    getSensorConfigs() {
        const sensors = [];
        try {
            for (const config of this.iotModulesConfig) {
                if (config) {
                    if (!config.moduleClass) {
                        __1.LogService.log(__1.LOG_LEVEL.ERROR, `Invalid IoT modules config format - module class is missing ${JSON.stringify(config)}`);
                    }
                    else if (module_classes_model_1.SENSOR_CLASSES[config.moduleClass]) {
                        sensors.push(config);
                    }
                }
            }
        }
        catch (error) {
            __1.LogService.log(__1.LOG_LEVEL.ERROR, `IoT config is not valid: ${error.message}`);
        }
        return sensors;
    }
    getSPublisherConfigs() {
        const publishers = [];
        try {
            for (const config of this.iotModulesConfig) {
                if (config) {
                    if (!config.moduleClass) {
                        __1.LogService.log(__1.LOG_LEVEL.ERROR, `Invalid IoT modules config format - module class is missing ${JSON.stringify(config)}`);
                    }
                    else if (module_classes_model_1.PUBLISHER_CLASSES[config.moduleClass]) {
                        publishers.push(config);
                    }
                }
            }
        }
        catch (error) {
            __1.LogService.log(__1.LOG_LEVEL.ERROR, `IoT config is not valid: ${error.message}`);
        }
        return publishers;
    }
    readConfigFile(fileName) {
        const location = path.resolve('.', fileName);
        if (fs.existsSync(location)) {
            return JSON.parse(fs.readFileSync(location).toString());
        }
        throw Error(`Edge SDK fail: file doesn't exist: ${location}`);
    }
}
exports.IotConfigProvider = IotConfigProvider;
