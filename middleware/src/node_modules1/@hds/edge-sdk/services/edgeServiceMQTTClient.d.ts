/// <reference types="node" />
import * as https from 'https';
import { EdgeServiceUnhandledDataCallback, EdgeServiceJsonObjectDataCallback, EdgeServiceEdgeDataCallback } from '../models/serviceToService/edgeServiceCallbacks';
import { EdgeServiceMessageType, EdgeServicePublishMessageMode } from '../serviceToService';
import { IServiceProvider } from './common/service.provider';
export declare class EdgeServiceMQTTClient {
    private mqttClient;
    private clientId;
    private topicCallbackInfoMap;
    private requestedSubscriptions;
    private httpsAgent;
    private generateEdgeServiceGroupTopic;
    constructor(serviceProvider: IServiceProvider, httpsAgent: https.Agent);
    createSubscriptionToServiceGroup(group: string, topic: string, messageType: EdgeServiceMessageType, callback: EdgeServiceUnhandledDataCallback | EdgeServiceJsonObjectDataCallback | EdgeServiceEdgeDataCallback): string;
    private isASCII;
    removeServiceGroupSubscription(subscriptionId: string): Promise<void>;
    private stopSubscription;
    private startSubscription;
    publishDataToPublisher(group: string, topic: string, publishMode: EdgeServicePublishMessageMode, data: String | Buffer | Object): boolean;
    private setupMqttOptions;
}
//# sourceMappingURL=edgeServiceMQTTClient.d.ts.map