"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RmqClientService = void 0;
const rabbitmq_connection_1 = __importDefault(require("@hds/rabbitmq-connection"));
const rabbit_mq_model_1 = require("../../models/common/rabbit-mq.model");
const logger_model_1 = require("./../../models/common/logger.model");
const logger_service_1 = require("./logger.service");
class RmqClientService {
    constructor(connectionString) {
        this.subscriptions = [];
        this.publishers = new Map();
        this.rabbitMq = new rabbitmq_connection_1.default(connectionString);
        this.rabbitMq.setOnAmqpConnectedCallback((conn) => this.onConnected(conn));
        this.rabbitMq.connect();
    }
    subscribeToMessages(subscriptionConfig, callback) {
        this.subscriptions.push(new rabbit_mq_model_1.RabbitMQSubscription(subscriptionConfig, callback));
        if (this.rabbitMq.amqpConnection != null) {
            this.rabbitMq.subscribeToMessages(this.rabbitMq.amqpConnection, subscriptionConfig, callback);
        }
    }
    setupChannelForPublishingMessages(publishingInfo, channelName) {
        this.publishers.set(channelName, publishingInfo);
        if (this.rabbitMq.amqpConnection != null) {
            this.rabbitMq.setupChannelForPublishingMessages(this.rabbitMq.amqpConnection, publishingInfo, channelName);
        }
    }
    publishData(channelName, data, routingKey) {
        this.rabbitMq.sendData(channelName, data, routingKey);
    }
    onConnected(conn) {
        logger_service_1.LogService.log(logger_model_1.LOG_LEVEL.SYSTEM_INFO, 'RabbitMQ connected');
        this.setupAllChannelsForPublishing(conn);
        this.subscribeToAllMessages(conn);
    }
    setupAllChannelsForPublishing(conn) {
        this.publishers.forEach((config, channelName) => {
            this.rabbitMq.setupChannelForPublishingMessages(conn, config, channelName);
        });
    }
    subscribeToAllMessages(conn) {
        this.subscriptions.forEach((subscription) => {
            this.rabbitMq.subscribeToMessages(conn, subscription.config, subscription.callback);
        });
    }
}
exports.RmqClientService = RmqClientService;
