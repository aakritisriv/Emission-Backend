"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MqttClientService = void 0;
const MQTT = __importStar(require("mqtt"));
const logger_service_1 = require("./logger.service");
const logger_model_1 = require("../../models/common/logger.model");
const rxjs_1 = require("rxjs");
class MqttClientService {
    constructor(mqttConnectionString, httpsAgent) {
        this.message$ = new rxjs_1.Subject();
        this._isConnected$ = new rxjs_1.BehaviorSubject(false);
        this.isConnected$ = this._isConnected$.asObservable();
        this.init(mqttConnectionString, httpsAgent);
    }
    get isConnected() {
        return this._isConnected$.getValue();
    }
    subscribe(topic) {
        this.client.subscribe(topic);
    }
    unsubscribe(topic, callback) {
        this.client.unsubscribe(topic, callback);
    }
    publish(topic, message) {
        this.client.publish(topic, message);
    }
    init(mqttConnectionString, httpsAgent) {
        const mqttOptions = {};
        if (httpsAgent) {
            mqttOptions.rejectUnauthorized = httpsAgent.options.rejectUnauthorized;
            mqttOptions.ca = String(httpsAgent.options.ca);
            mqttOptions.cert = String(httpsAgent.options.cert);
            mqttOptions.key = String(httpsAgent.options.key);
        }
        this.client = MQTT.connect(mqttConnectionString, mqttOptions);
        this.client.on('connect', () => {
            logger_service_1.LogService.log(logger_model_1.LOG_LEVEL.SYSTEM_INFO, 'MQTT client connected.');
            this._isConnected$.next(true);
        });
        this.client.on('error', (err) => {
            logger_service_1.LogService.log(logger_model_1.LOG_LEVEL.WARNING, 'MQTT Connection Error ' + err);
        });
        this.client.on('offline', () => {
            logger_service_1.LogService.log(logger_model_1.LOG_LEVEL.WARNING, 'MQTT client disconnected.');
            this._isConnected$.next(false);
        });
        this.client.on('message', (topic, message) => {
            this.message$.next({ topic, message });
        });
    }
}
exports.MqttClientService = MqttClientService;
