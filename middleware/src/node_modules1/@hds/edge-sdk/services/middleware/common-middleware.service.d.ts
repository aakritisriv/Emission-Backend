import { IDatabaseConnection } from '../../db/databaseConnection';
import { ICommonMiddlewareConfig } from '../../models/middleware/common-middleware.config';
import { CommonMiddlewareDataSubscriptionRouter } from '../../routes/api-v1/common-middleware-data-subscription.router';
import { CommonMiddlewareDataRouter } from '../../routes/api-v1/common-middleware-data.router';
import { IRmqClientService } from '../common/rabbit-mq.client';
import { IWebSocketService } from '../common/web-socket.service';
import { IDataProcessor } from './data-processor.service';
import { IDataSubscriptionManager } from './data-subscription-manager';
export interface ICommonMiddleware {
    /**
     * Middleware core service for data processing and caching
     * capable to subscribe to RMQ data and publish results to WS namespaces (subscription based namespaces publish)
     */
    readonly dataProcessor: IDataProcessor;
    /**
     * UI data subscription manager - provides capability to subscribe and retrieve only necessary variables data scope
     * for each registered subscription WS namespace is created if config?.webSocketPublish set to true
     */
    readonly dataSubscriptionManager: IDataSubscriptionManager;
    /**
     * Express Router for middleware data access
     */
    readonly dataRouter: CommonMiddlewareDataRouter;
    /**
     * Express Router configured to support UI subscriptions management
     */
    readonly subscriptionRouter: CommonMiddlewareDataSubscriptionRouter;
}
export declare class CommonMiddleware implements ICommonMiddleware {
    /**
     * Middleware core service for data processing and caching
     * capable to subscribe to RMQ data and publish results to WS namespaces (subscription based namespaces publish)
     */
    readonly dataProcessor: IDataProcessor;
    /**
     * UI data subscription manager - provides capability to subscribe and retrieve only necessary variables data scope
     * for each registered subscription WS namespace is created if config?.webSocketPublish set to true
     */
    readonly dataSubscriptionManager: IDataSubscriptionManager;
    /**
     * Express Router for middleware data access
     */
    readonly dataRouter: CommonMiddlewareDataRouter;
    /**
     * Express Router configured to support UI subscriptions management
     */
    readonly subscriptionRouter: CommonMiddlewareDataSubscriptionRouter;
    private dbConnection?;
    private webSocket?;
    private rmq?;
    /**
     * Initialize common middleware
     * @param config important to pass config parameters to manage middleware capabilities
     * @param rabbitMq optional but required to have incoming data source as RMQ
     * @param webSocket optional to publish data changes updates to WS subscriptions namespaces
     * @param dbConnection optional to have DB caching of last data values and subscriptions registered
     */
    constructor(config: ICommonMiddlewareConfig, rabbitMq?: IRmqClientService, webSocket?: IWebSocketService, dbConnection?: IDatabaseConnection);
}
//# sourceMappingURL=common-middleware.service.d.ts.map