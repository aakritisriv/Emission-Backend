import { Observable } from 'rxjs';
import { EdgeData, IEdgeData } from '../..';
import { IDatabaseConnection } from '../../db/databaseConnection';
import { ICacheData } from '../../models/middleware/cache-data.model';
import { IDataMessage } from '../../models/middleware/data-message.model';
import { IDataModel } from '../../models/middleware/data.model';
import { IWebSocketService } from '../common/web-socket.service';
import { IDataSubscriptionManager } from './data-subscription-manager';
import { IRmqClientService } from '../common/rabbit-mq.client';
import { IRabbitMqConfig } from '../../models/common/rabbit-mq.config.model';
export declare type EdgeDataProcessor = (data: EdgeData) => void;
export declare type DataModelsProcessor = (dataModels: Map<string, IDataModel>) => void;
export declare type DataResultCallback = (dataModels: Map<string, IDataModel>) => void;
export interface IDataProcessor {
    /**
     * Stream to subscribe for cache loaded event if DB is enabled in middleware config
     * fired when cache is loaded from DB
     */
    readonly cacheLoaded$: Observable<boolean>;
    /**
     * Set data to process by registered Edge data processors
     * afterwards data will be cached and published to WS if configured
     * @param message EdgeData format message
     */
    processMessage(message: IEdgeData): void;
    /**
     * Adds callback to chain of data processors executed sequentially for each incoming Edge data message
     * @param func callback function added to process Edge data message
     */
    useEdgeDataProcessor(func: EdgeDataProcessor): void;
    /**
     * Set data to process by registered Data model processors
     * afterwards data will be cached and published to WS if configured
     * @param dataModels data in format of Map<string, IDataModel>
     */
    processDataModels(dataModels: Map<string, IDataModel>): void;
    /**
     * Adds callback to chain of data processors executed sequentially for each incoming Data models message
     * @param func callback function added to process Data model data message
     */
    useDataModelsProcessor(func: DataModelsProcessor): void;
    /**
     * Adds callback to handle data result after data n=message was processed by processors and cached
     * @param func data processed result handler callback
     */
    onDataProcessedResult(func: DataResultCallback): void;
    /**
     * Publishes data to RMQ in Edge format
     * if configured using publish configuration part
     * @param data data message in IDataMessage format
     */
    publishDataToRMQ(data: IDataMessage): IEdgeData;
    /**
     * Publishes data to RMQ in Edge format
     * if configured using publish configuration part
     * @param data data message in EdgeData format
     */
    publishEdgeDataToRMQ(data: IEdgeData): IEdgeData;
    /**
     * Get variable data model from cache
     */
    getCachedVariable(variableName: string): IDataModel;
    /**
     * check if there's data model in cache for specific variable
     */
    hasVariableCache(variableName: string): boolean;
    /**
     * Retrieve whole data cache
     */
    getCacheData(): ICacheData;
    /**
     * Get whole cache in format of IDataMessage
     */
    getCacheDataMessage(): IDataMessage;
    /**
     * Retrieve cache data for specific subscription in format of IDataMessage
     * @param uniqueKey subscription unique name used when subscription registered
     */
    getSubscriptionData(uniqueKey: string): IDataMessage;
    /**
     * Converts data message to IEdgeData format
     * @param data data message
     */
    convertToEdgeData(data: IDataMessage): IEdgeData;
}
export declare class DataProcessor implements IDataProcessor {
    /**
     * WebSocket message name used to publish processing results
     */
    static readonly messageName = "realTimeData";
    /**
     * Stream to subscribe for cache loaded event if DB is enabled in middleware config
     * fired when cache is loaded from DB
     */
    readonly cacheLoaded$: Observable<boolean>;
    private readonly _cacheLoaded;
    private edgeDataProcessors;
    private dataModelsProcessors;
    private dataResultProcessors;
    private dataSubscription;
    private rmqDataService?;
    private db?;
    private dataCache;
    private webSocket?;
    constructor(dataSubscription: IDataSubscriptionManager, dbConnection?: IDatabaseConnection, webSocket?: IWebSocketService, rmq?: IRmqClientService, rabbitMqConfig?: IRabbitMqConfig);
    /**
     * Publishes data to RMQ in Edge format
     * if configured using publish configuration part
     * @param data data message in IDataMessage format
     */
    publishDataToRMQ(data: IDataMessage, routingKey?: string): IEdgeData;
    /**
     * Publishes data to RMQ in Edge format
     * if configured using publish configuration part
     * @param data data message in EdgeData format
     */
    publishEdgeDataToRMQ(data: IEdgeData, routingKey?: string): IEdgeData;
    /**
     * Adds callback to chain of data processors executed sequentially for each incoming Edge data message
     * @param func callback function added to process Edge data message
     */
    useEdgeDataProcessor(func: EdgeDataProcessor): void;
    /**
     * Adds callback to chain of data processors executed sequentially for each incoming Data models message
     * @param func callback function added to process Data model data message
     */
    useDataModelsProcessor(func: DataModelsProcessor): void;
    /**
     * Adds callback to handle data result after data n=message was processed by processors and cached
     * @param func data processed result handler callback
     */
    onDataProcessedResult(func: DataResultCallback): void;
    /**
     * Set data to process by registered Edge data processors
     * afterwards data will be cached and published to WS if configured
     * @param message EdgeData format message
     */
    processMessage(message: IEdgeData): void;
    /**
     * Set data to process by registered Data model processors
     * afterwards data will be cached and published to WS if configured
     * @param dataModels data in format of Map<string, IDataModel>
     */
    processDataModels(dataModels: Map<string, IDataModel>): void;
    /**
     * Converts data message to IEdgeData format
     * @param data data message
     */
    convertToEdgeData(data: IDataMessage): IEdgeData;
    /**
     * Retrieve cache data for specific subscription in format of IDataMessage
     * @param uniqueKey subscription unique name used when subscription registered
     */
    getSubscriptionData(uniqueKey: string): IDataMessage;
    /**
     * Get variable data model from cache
     */
    getCachedVariable(variableName: string): IDataModel;
    /**
     * check if there's data model in cache for specific variable
     */
    hasVariableCache(variableName: string): boolean;
    /**
     * Retrieve whole data cache
     */
    getCacheData(): ICacheData;
    /**
     * Get whole cache in format of IDataMessage
     */
    getCacheDataMessage(): IDataMessage;
    private cacheAndProcessResults;
    private setDataCache;
    private processRealTimeForSubscribers;
    private processSocketMessage;
    private createDataMessage;
    private mapDataModelToMessageModel;
    private edgeDataToDataModels;
    private cacheDataModels;
    private createDataModel;
}
//# sourceMappingURL=data-processor.service.d.ts.map