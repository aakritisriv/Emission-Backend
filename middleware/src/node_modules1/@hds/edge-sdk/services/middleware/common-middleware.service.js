"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommonMiddleware = void 0;
const common_middleware_data_subscription_router_1 = require("../../routes/api-v1/common-middleware-data-subscription.router");
const common_middleware_data_router_1 = require("../../routes/api-v1/common-middleware-data.router");
const data_processor_service_1 = require("./data-processor.service");
const data_subscription_manager_1 = require("./data-subscription-manager");
class CommonMiddleware {
    /**
     * Initialize common middleware
     * @param config important to pass config parameters to manage middleware capabilities
     * @param rabbitMq optional but required to have incoming data source as RMQ
     * @param webSocket optional to publish data changes updates to WS subscriptions namespaces
     * @param dbConnection optional to have DB caching of last data values and subscriptions registered
     */
    constructor(config, rabbitMq, webSocket, dbConnection) {
        if (config === null || config === void 0 ? void 0 : config.webSocketPublish) {
            this.webSocket = webSocket;
        }
        if (config === null || config === void 0 ? void 0 : config.useDbCaching) {
            this.dbConnection = dbConnection;
        }
        if ((config === null || config === void 0 ? void 0 : config.rabbitMqConfig) != null &&
            ((config === null || config === void 0 ? void 0 : config.rabbitMqConfig.publisherConfig) != null || (config === null || config === void 0 ? void 0 : config.rabbitMqConfig.subscriberConfig) != null)) {
            this.rmq = rabbitMq;
        }
        this.dataSubscriptionManager = new data_subscription_manager_1.DataSubscriptionManager(this.dbConnection, this.webSocket);
        this.dataProcessor = new data_processor_service_1.DataProcessor(this.dataSubscriptionManager, this.dbConnection, this.webSocket, this.rmq, config === null || config === void 0 ? void 0 : config.rabbitMqConfig);
        this.dataRouter = new common_middleware_data_router_1.CommonMiddlewareDataRouter(this.dataProcessor, this.dataSubscriptionManager);
        this.subscriptionRouter = new common_middleware_data_subscription_router_1.CommonMiddlewareDataSubscriptionRouter(this.dataProcessor, this.dataSubscriptionManager);
    }
}
exports.CommonMiddleware = CommonMiddleware;
