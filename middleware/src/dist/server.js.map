{"version":3,"file":"server.js","sourceRoot":"","sources":["../app/server.ts"],"names":[],"mappings":";;;AAAA,4BAA0B;AAC1B,mCAAmC;AACnC,0CAA0C;AAC1C,6BAA6B;AAC7B,qCAAyD;AACzD,mCAAmC;AACnC,2CAAgD;AAGhD,kEAA+D;AAE/D,wEAAmE;AACnE,MAAa,MAAM;IAGf;QACI,IAAI,CAAC,GAAG,GAAG,OAAO,EAAE,CAAC;QACrB,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,aAAa,EAAE;YACvC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,uBAAc,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;SACvE;QAED,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC7B,CAAC;IACM,kBAAkB,CAAC,UAAsB;QAC5C;;;;;WAKG;QACH,kBAAS,CAAC,GAAG,CAAC,6BAAiB,EAAE,UAAU,CAAC,CAAC;IAC/C,CAAC;IAEI,wBAAwB;QAG3B,MAAM,OAAO,GAAG,kBAAS,CAAC,GAAG,CAAC,mCAAgB,CAAC,CAAC;QAEhD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,sBAAsB,EAAE,OAAO,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC,qCAAqC;IAGnH,CAAC;IACM,qBAAqB;QACxB,MAAM,WAAW,GAAG,kBAAS,CAAC,GAAG,CAAC,uCAAiB,CAAC,CAAC;QACrD,WAAW,CAAC,eAAe,EAAE,CAAC;IAChC,CAAC;IACI,iBAAiB;QACpB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;QAChC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;IAC7D,CAAC;CAEJ;AAvCD,wBAuCC;AACD,kBAAe,IAAI,MAAM,EAAE,CAAC","sourcesContent":["import 'reflect-metadata';\r\nimport * as express from 'express';\r\nimport * as bodyParser from 'body-parser';\r\nimport * as cors from 'cors';\r\nimport { corsClientHost, serviceConfig } from './config';\r\nimport { Container } from 'typedi';\r\nimport { HTTP_SERVER_TOKEN } from './constants';\r\nimport { createProxyMiddleware } from 'http-proxy-middleware';\r\nimport LogService from '@hds/edge-sdk';\r\nimport { EWEdgeSdkService } from './services/edge-sdk.service';\r\nimport { Server as HttpServer } from 'http';\r\nimport { DataCustomService } from './services/Data-Custom.service';\r\nexport class Server {\r\n    public app: express.Application;\r\n    \r\n    constructor() {\r\n        this.app = express();\r\n        if (this.app.get('env') === 'development') {\r\n            this.app.use(cors({ origin: [corsClientHost], credentials: true }));\r\n        }\r\n\r\n        this.createMiddlewares();\r\n    }\r\n    public setHttpServerToken(httpServer: HttpServer): void {\r\n        /**\r\n         * Add http server to Inversion-of-Control's (IoC) container.\r\n         * Will need it later for websocket client.\r\n         *\r\n         * Side note: in this DEMO middleware IoC is implemented using 3rd-party npm package \"typedi\"\r\n         */\r\n        Container.set(HTTP_SERVER_TOKEN, httpServer);\r\n      }\r\n    \r\n    public createsubscriptionRouter() {\r\n\r\n        \r\n        const edgeSdk = Container.get(EWEdgeSdkService);\r\n\r\n        this.app.use('/api/v1/subscription', edgeSdk._subscriptionRouter.router); //localhost:3000/api/v1/subscription/\r\n\r\n\r\n    }\r\n    public handleDatacoustomover(): void {\r\n        const dataService = Container.get(DataCustomService);\r\n        dataService.handleCrossover();\r\n      }\r\n    public createMiddlewares() {\r\n        this.app.use(bodyParser.json());\r\n        this.app.use(bodyParser.urlencoded({ extended: false }));\r\n    }\r\n\r\n}\r\nexport default new Server();"]}