{"version":3,"file":"edge-sdk.service.js","sourceRoot":"","sources":["../../app/services/edge-sdk.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,4CAA+D;AAC/D,mCAAgD;AAEhD,sCAA2C;AAO3C,4CAAiD;AAKjD,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;IAKzB,YAA+C,UAAU;QAAV,eAAU,GAAV,UAAU,CAAA;QACrD,qBAAU,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QAErC,MAAM,GAAG,GAAG,IAAI,kBAAO,EAAE,CAAC;QAE1B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAClB,oCAAoC;QACvC,iCAAiC;QAC7B,GAAG,CAAC,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAGnD,GAAG,CAAC,oBAAoB,CAAC;YACrB,cAAc,EAAE;gBACZ,gBAAgB,EAAE,CAAC,uBAAc,CAAC,QAAQ,CAAC;gBAC3C,eAAe,EAAE,uBAAc,CAAC,QAAQ;aAC3C;YACD,gBAAgB,EAAE,IAAI;YACtB,YAAY,EAAE,IAAI;SACrB,CAAC,CAAC;QACH,GAAG,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,GAAE,EAAE;YAC/B,qBAAU,CAAC,GAAG,CAAC,oBAAS,CAAC,WAAW,EAAC,kCAAkC,CAAC,CAAA;QAC5E,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAC,EAAE;YACZ,qBAAU,CAAC,GAAG,CAAC,oBAAS,CAAC,KAAK,EAAC,GAAG,CAAC,CAAC;QACxC,CAAC,CAAC,CAAA;QACF,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC,eAAe,CAAC,SAAS,CAAC;QAChD,IAAI,CAAC,cAAc,GAAG,GAAG,CAAC,gBAAgB,CAAC,aAAa,CAAC;QACzD,IAAI,CAAC,oBAAoB,GAAG,GAAG,CAAC,gBAAgB,CAAC,uBAAuB,CAAC;QACzE,IAAI,CAAC,mBAAmB,GAAG,GAAG,CAAC,gBAAgB,CAAC,kBAAkB,CAAC;IACvE,CAAC;CAGJ,CAAA;AApCY,gBAAgB;IAF5B,gBAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;IAOT,WAAA,eAAM,CAAC,6BAAiB,CAAC,CAAA;;GAL7B,gBAAgB,CAoC5B;AApCY,4CAAgB","sourcesContent":["import { EdgeSDK, LogService, LOG_LEVEL } from '@hds/edge-sdk';\r\nimport { Inject, Service, Token } from 'typedi';\r\n\r\nimport { rabbitMqConfig } from '../config';\r\n//import { IRmqClientService } from '@hds/edge-sdk/services/common/rabbit-mq.client';\r\n//import { IRabbitMQSetting } from '@hds/edge-sdk/models/common/rabbit-mq.config.model';\r\nimport { IWebSocketService } from '@hds/edge-sdk/services/common/web-socket.service';\r\nimport { IDataProcessor } from '@hds/edge-sdk/services/middleware/data-processor.service';\r\nimport { IDataSubscriptionManager } from '@hds/edge-sdk/services/middleware/data-subscription-manager';\r\nimport { CommonMiddlewareDataSubscriptionRouter } from '@hds/edge-sdk/routes/api-v1/common-middleware-data-subscription.router';\r\nimport { HTTP_SERVER_TOKEN } from '../constants';\r\nimport { exception } from 'console';\r\n\r\n@Service({ global: true })\r\n\r\nexport class EWEdgeSdkService {\r\n    public _webSocket: IWebSocketService;\r\n    public _dataProcessor: IDataProcessor;\r\n    public _subscriptionManager: IDataSubscriptionManager;\r\n    public _subscriptionRouter: CommonMiddlewareDataSubscriptionRouter;\r\n    constructor(@Inject(HTTP_SERVER_TOKEN) private httpServer) {\r\n        LogService.initialize('config.json');\r\n       \r\n        const sdk = new EdgeSDK();\r\n      \r\n        console.log(sdk);\r\n       // console.log(sdk.serviceProvider);\r\n    //  console.log(this.httpServer);\r\n        sdk.serviceProvider.initWebSocket(this.httpServer);\r\n        \r\n        \r\n        sdk.initCommonMiddleware({\r\n            rabbitMqConfig: {\r\n                subscriberConfig: [rabbitMqConfig.settings],\r\n                publisherConfig: rabbitMqConfig.settings\r\n            },\r\n            webSocketPublish: true,\r\n            useDbCaching: true\r\n        });\r\n        sdk.iotManagement.start().then(()=>{\r\n            LogService.log(LOG_LEVEL.SYSTEM_INFO,\"IoT modules created and running.\")\r\n        }).catch((err)=>{\r\n            LogService.log(LOG_LEVEL.ERROR,err);\r\n        })\r\n        this._webSocket = sdk.serviceProvider.webSocket;\r\n        this._dataProcessor = sdk.commonMiddleware.dataProcessor;\r\n        this._subscriptionManager = sdk.commonMiddleware.dataSubscriptionManager;\r\n        this._subscriptionRouter = sdk.commonMiddleware.subscriptionRouter;\r\n    }\r\n\r\n\r\n}"]}