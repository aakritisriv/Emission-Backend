/// <reference types="node" />
import * as https from 'https';
import { IEdgeTelemetryServiceRequest } from '../models/api/telemetry/edgeTelemetryServiceRequest';
import { IEdgeTelemetrySubscriptionResponse } from '../models/api/telemetry/edgeTelemetrySubscriptionResponse';
import { EdgeTelemetryDataCallback } from '../models/telemetry/edgeTelemetryCallbacks';
import { IServiceProvider } from './common/service.provider';
export declare class EdgeTelemetryMQTTClient {
    private mqttClient;
    private clientId;
    private edgeTelemetryApiBase;
    private edgeApiAddress;
    private topicCallbackMap;
    private requestedSubscriptions;
    private httpsAgent;
    constructor(serviceProvider: IServiceProvider, edgeApiAddress: string, httpsAgent: https.Agent);
    createCustomDataSubscription(telemetryRequest: IEdgeTelemetryServiceRequest, callback: EdgeTelemetryDataCallback): string;
    registerTelemetryService(apiRequest: IEdgeTelemetryServiceRequest): Promise<IEdgeTelemetrySubscriptionResponse>;
    createSDKDataSubscription(telemetryRequest: IEdgeTelemetryServiceRequest, callback: EdgeTelemetryDataCallback): string;
    removeTelemetryService(subscriptionId: string): Promise<void>;
    private getTelemetrySubscriptionBaseUrl;
    private stopSubscription;
    private startSubscription;
    private checkIfSubscriptionIsAlive;
    private sendHeartbeatForClient;
    private setupMqttOptions;
}
//# sourceMappingURL=edgeTelemetryMQTTClient.d.ts.map