"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IotManagementGenericFactory = void 0;
const url = __importStar(require("url"));
const resultStatusObject_1 = require("../../models/api/resultStatusObject");
const iot_management_model_1 = require("../../models/iotManagement/iot-management.model");
const module_classes_model_1 = require("../../models/iotManagement/module-classes.model");
const __1 = require("../..");
class IotManagementGenericFactory {
    constructor(apiCallsService, configProvider) {
        this.apiCallsService = apiCallsService;
        this.configProvider = configProvider;
    }
    createSensors(config) {
        const sensorsCreated = new Array();
        const result = new resultStatusObject_1.ResultStatusObject();
        const uri = url.resolve(this.configProvider.iotConfig.baseIoTAddress, `${this.configProvider.iotConfig.api_uri}${this.configProvider.iotConfig.sensors_uri}`);
        const promises = [];
        for (const sensorConfig of config) {
            const requestName = module_classes_model_1.SENSOR_CLASSES[sensorConfig.moduleClass];
            if (!requestName) {
                __1.LogService.log(__1.LOG_LEVEL.ERROR, `IoT management does not support ${sensorConfig.moduleClass} moduleClass. Sensor will not be created.`);
            }
            else {
                const params = { name: requestName };
                const sensor = new iot_management_model_1.EdgeIotModule();
                sensor.config = sensorConfig;
                sensor.name = sensorConfig.name;
                sensorsCreated.push(sensor);
                promises.push(this.apiCallsService.post(uri, sensorConfig, params));
            }
        }
        return new Promise((resolve, reject) => {
            Promise.all(promises)
                .then((x) => {
                for (const response of x) {
                    if (response.error != null) {
                        __1.LogService.log(__1.LOG_LEVEL.ERROR, response.error);
                        throw new Error(response.error);
                    }
                    const sensor = sensorsCreated.find((s) => s.config.name === response.name);
                    if (sensor) {
                        sensor.id = response.id;
                        sensor.state = response.state;
                    }
                }
                result.result = sensorsCreated;
                result.message = 'Sensors created successfully.';
                resolve(result);
            })
                .catch((err) => {
                result.message = err.message;
                result.status = resultStatusObject_1.ResultStatus.ERROR;
                reject(result);
            });
        });
    }
    createPublishers(config) {
        const publishersCreated = new Array();
        const result = new resultStatusObject_1.ResultStatusObject();
        const uri = url.resolve(this.configProvider.iotConfig.baseIoTAddress, `${this.configProvider.iotConfig.api_uri}${this.configProvider.iotConfig.services_uri}`);
        const promises = [];
        for (const publisherConfig of config) {
            const requestName = module_classes_model_1.PUBLISHER_CLASSES[publisherConfig.moduleClass];
            if (!requestName) {
                __1.LogService.log(__1.LOG_LEVEL.ERROR, `IoT management does not support ${publisherConfig.moduleClass} moduleClass. Publisher will not be created.`);
            }
            else {
                const params = { name: requestName };
                const publisher = new iot_management_model_1.EdgeIotModule();
                publisher.config = publisherConfig;
                publisher.name = publisherConfig.name;
                publishersCreated.push(publisher);
                promises.push(this.apiCallsService.post(uri, publisherConfig, params));
            }
        }
        return new Promise((resolve, reject) => {
            Promise.all(promises)
                .then((x) => {
                for (const response of x) {
                    if (response.error != null) {
                        __1.LogService.log(__1.LOG_LEVEL.ERROR, response.error);
                        throw new Error(response.error);
                    }
                    const publisher = publishersCreated.find((s) => s.name === response.name);
                    if (publisher) {
                        publisher.id = response.id;
                        publisher.state = response.state;
                    }
                }
                result.result = publishersCreated;
                result.message = 'Publishers created successfully.';
                resolve(result);
            })
                .catch((err) => {
                result.message = err.message;
                result.status = resultStatusObject_1.ResultStatus.ERROR;
                reject(result);
            });
        });
    }
}
exports.IotManagementGenericFactory = IotManagementGenericFactory;
