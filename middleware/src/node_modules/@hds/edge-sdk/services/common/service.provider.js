"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceProvider = void 0;
const databaseConnection_1 = require("../../db/databaseConnection");
const rabbit_mq_client_1 = require("./rabbit-mq.client");
const mqtt_client_1 = require("./mqtt.client");
const web_socket_service_1 = require("./web-socket.service");
const __1 = require("../..");
class ServiceProvider {
    constructor(endpoints, httpsAgent) {
        this.endpoints = endpoints;
        this.httpsAgent = httpsAgent;
    }
    get dbConnection() {
        if (!this._dbConnection) {
            if (this.endpoints.mongoConnection == null) {
                throw Error('mongoConnection string param is missing in the SDK injected params');
            }
            this._dbConnection = new databaseConnection_1.MongoDbConnection(this.endpoints.mongoConnection);
        }
        return this._dbConnection;
    }
    get rabbitMq() {
        if (!this._rabbitMq) {
            if (this.endpoints.rabbitConnection == null) {
                throw Error('rabbitConnection string param is missing in the SDK injected params');
            }
            this._rabbitMq = new rabbit_mq_client_1.RmqClientService(this.endpoints.rabbitConnection);
        }
        return this._rabbitMq;
    }
    get mqtt() {
        if (!this._mqtt) {
            if (this.endpoints.mqttConnectionString == null) {
                throw Error('mqttConnection string param is missing in the SDK injected params');
            }
            this._mqtt = new mqtt_client_1.MqttClientService(this.endpoints.mqttConnectionString, this.httpsAgent);
        }
        return this._mqtt;
    }
    get webSocket() {
        if (!this._webSocket) {
            throw Error('Web Socket service is not initialized - run initWebSocket(server: Server) to initialize.');
        }
        return this._webSocket;
    }
    initWebSocket(server) {
        if (this._webSocket) {
            __1.LogService.log(__1.LOG_LEVEL.WARNING, `Attempt to initialize already initialized Web Socket service.`);
            return;
        }
        this._webSocket = new web_socket_service_1.EdgeWebSocketService(server);
    }
}
exports.ServiceProvider = ServiceProvider;
