"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EdgeWebSocketService = void 0;
const socket_io_1 = __importDefault(require("socket.io"));
const __1 = require("../..");
class EdgeWebSocketService {
    constructor(server) {
        this.server = server;
        this.port = this.server.address().port;
        this.socket = socket_io_1.default(this.server);
        if (process.env.ALLOW_CORS) {
            this.socket.origins('*:*');
        }
        this.listen();
    }
    broadcastMessageToDefault(msg, messageName) {
        this.socket.emit(messageName, msg);
    }
    broadcastToNamespace(namespace, messageName, messageData) {
        const ns = this.socket.of(namespace);
        if (!ns) {
            throw Error(`Namespace ${namespace} doesn't exist.`);
        }
        ns.emit(messageName, messageData);
    }
    addNamespace(name) {
        if (!(name.charAt[0] === '/')) {
            name = `/${name}`;
        }
        // check if exists
        if (this.socket.nsps[name]) {
            return;
        }
        const solutionNamespace = this.socket.of(name);
        solutionNamespace.on('connect', (socket) => {
            __1.LogService.log(__1.LOG_LEVEL.SYSTEM_INFO, `Client ${socket.client.id} connected to ${solutionNamespace.name} namespace`);
            /* chat namespace listeners here */
            socket.on('disconnect', () => {
                __1.LogService.log(__1.LOG_LEVEL.SYSTEM_INFO, `Client ${socket.client.id} disconnected from ${solutionNamespace.name} namespace`);
            });
        });
    }
    removeNamespace(name) {
        const namespace = this.socket.of(name);
        const connectedNameSpaceSockets = Object.keys(namespace.connected);
        connectedNameSpaceSockets.forEach((socketId) => {
            namespace.connected[socketId].disconnect();
        });
        namespace.removeAllListeners();
        delete this.socket[name];
    }
    listen() {
        this.socket.on('connect', (socket) => {
            __1.LogService.log(__1.LOG_LEVEL.SYSTEM_INFO, `Client ${socket.client.id}  connected to websocket server on port ${this.port}`);
            socket.on('disconnect', () => {
                __1.LogService.log(__1.LOG_LEVEL.SYSTEM_INFO, `Client ${socket.client.id}  disconnected`);
            });
        });
    }
}
exports.EdgeWebSocketService = EdgeWebSocketService;
