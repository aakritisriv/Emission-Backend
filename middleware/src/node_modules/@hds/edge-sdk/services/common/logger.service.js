"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogService = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const logger_model_1 = require("../../models/common/logger.model");
class LogService {
    constructor(configFilePath) {
        this.config = new logger_model_1.LoggingConfiguration();
        this.configFilePath = path.resolve('.', configFilePath);
        this.initDefaultConfiguration();
        this.logger = new logger_model_1.Logger(this.config);
        this.loadConfig();
    }
    static initialize(configFilePath) {
        if (this._instance == null) {
            this._instance = new LogService(configFilePath);
        }
        return this._instance;
    }
    static log(level, message) {
        if (this._instance == null) {
            throw Error('Logger is not initialized');
        }
        this._instance.log(level, message);
    }
    log(level, message) {
        this.logger.log(level, message);
    }
    getConfig() {
        return this.config;
    }
    updateConfig(logConfig) {
        const updated = this.updateConfigValues(logConfig);
        if (updated) {
            this.saveConfig();
        }
        return this.config;
    }
    updateConfigValues(logConfig) {
        let updated = false;
        for (const logLevel of Object.values(logger_model_1.LOG_LEVEL)) {
            if (Object.prototype.hasOwnProperty.call(logConfig, logLevel)) {
                const configSection = this.config[logLevel];
                const configData = logConfig[logLevel];
                for (const property in configData) {
                    if (Object.prototype.hasOwnProperty.call(configData, property)) {
                        if (configSection[property] !== configData[property]) {
                            configSection[property] = configData[property];
                            updated = true;
                        }
                    }
                }
            }
        }
        return updated;
    }
    initDefaultConfiguration() {
        for (const logLevel of Object.values(logger_model_1.LOG_LEVEL)) {
            const logger = new logger_model_1.DefaultLoggerMethod();
            switch (logLevel) {
                case logger_model_1.LOG_LEVEL.ERROR:
                    logger.enabled = true;
                    logger.logMethod = console.error;
                    break;
                case logger_model_1.LOG_LEVEL.WARNING:
                    logger.enabled = true;
                    logger.logMethod = console.warn;
                    break;
                case logger_model_1.LOG_LEVEL.SYSTEM_INFO:
                    logger.enabled = true;
                    logger.logMethod = console.info;
                    break;
                default:
                    break;
            }
            this.config[logLevel] = logger;
        }
    }
    loadConfig() {
        const fullConfig = this.readConfigFile(this.configFilePath);
        if (fullConfig && Object.prototype.hasOwnProperty.call(fullConfig, 'loggerConfig')) {
            this.updateConfigValues(fullConfig.loggerConfig);
        }
        else {
            this.saveConfig();
        }
    }
    saveConfig() {
        let fullConfig = this.readConfigFile(this.configFilePath);
        if (fullConfig != null) {
            fullConfig.loggerConfig = this.config;
        }
        else {
            fullConfig = { loggerConfig: this.config };
        }
        this.writeConfigFile(this.configFilePath, fullConfig);
    }
    readConfigFile(filePath) {
        const location = path.resolve('.', filePath);
        if (fs.existsSync(filePath)) {
            return JSON.parse(fs.readFileSync(location).toString());
        }
    }
    writeConfigFile(filePath, file) {
        fs.writeFileSync(filePath, JSON.stringify(file));
    }
}
exports.LogService = LogService;
