/// <reference types="node" />
import { ICommonMiddlewareConfig } from './../models/middleware/common-middleware.config';
import { Observable } from 'rxjs';
import { IEdgeHistorianData } from '../models/api/historian/edgeHistorianData';
import { IEdgeHistorianDataInfo } from '../models/api/historian/edgeHistorianDataInfo';
import { IEdgeHistorianDataQuery } from '../models/api/historian/edgeHistorianDataQuery';
import { EdgeTelemetryRequest, IEdgeTelemetryServiceRequest } from '../models/api/telemetry/edgeTelemetryServiceRequest';
import { IEdgeData } from '../models/edgeData';
import { EdgeHistorianDataCallback } from '../models/historian/edgeHistorianCallbacks';
import { IEdgeHistorianDataSubscriptionsStatus } from '../models/historian/edgeHistorianDataSubscriptionsHealthStatus';
import { IEdgeIoTDataSourceStatus } from '../models/iotManagement/edge-iot-data-source.model';
import { IEdgeIotModule } from '../models/iotManagement/iot-management.model';
import { IUmsMeta } from '../models/iotManagement/ums-meta.model';
import { EdgeServiceEdgeDataCallback, EdgeServiceJsonObjectDataCallback, EdgeServiceUnhandledDataCallback } from '../models/serviceToService/edgeServiceCallbacks';
import { EdgeTelemetryDataCallback } from '../models/telemetry/edgeTelemetryCallbacks';
import { EdgeTelemetryInboundDataRequest } from '../models/telemetry/edgeTelemetrySdkRequests';
import { EdgeServiceMessageType, EdgeServicePublishMessageMode } from '../serviceToService';
import { IEdgeTelemetrySubscriptionResponse } from './../models/api/telemetry/edgeTelemetrySubscriptionResponse';
import { IRouterProvider } from './common/router.provider';
import { IServiceProvider } from './common/service.provider';
import { ICommonMiddleware } from './middleware/common-middleware.service';
/**
 * SDK to interface between services via edge
 */
export interface IEdgeServiceCommunicationSDK {
    /**
     * Subscribe to a group/topic being published by another service
     * @param group The group to subscribe to.  Each app set should define a group to publish in as a unique namespace
     * @param topic The topic to subscribe to under the group.  Topics should describe the data being sent
     * @param messageType Selects the data parsing mode the subscription handler should use to generate the callback parameter.
     * This should match the type of callback that is passed in the callback parameter.
     * @param callback a callback function of a supported type that will be called when data is received.
     * Must be one of the following: [[EdgeServiceUnhandledDataCallback]], [[EdgeServiceJsonObjectDataCallback]], or [[EdgeServiceEdgeDataCallback]]
     * @returns a UUID string with the subscriptionId
     */
    subscribeToServiceGroupData(group: string, topic: string, messageType: EdgeServiceMessageType, callback: EdgeServiceUnhandledDataCallback | EdgeServiceJsonObjectDataCallback | EdgeServiceEdgeDataCallback): string;
    /**
     * Unsubscribe from an existing service to service subscription
     * @param subscriptionId a UUID string with the subscription ID
     */
    unsubscribeFromServiceGroupData(subscriptionId: string): Promise<void>;
    /**
     * publishes a message to a group/topic
     * @param group The group to publish to.  Each app set should define a group to publish in as a unique namesapce
     * @param topic The topic to publish to under the group.  Topics should describe the data being sent
     * @param publishMode Selects the publish mode to use when passing data to the function.
     * STRING_OR_BUFFER should be used for data that is already in string/binary format &
     * CONVERT_TO_JSON should be used for JavaScript Objects that can be serialized to JSON
     * @param data The data to publish.  Should match with the publish mode.
     * @returns a boolean representing if the message was successfully set or not
     */
    publishServiceGroupData(group: string, topic: string, publishMode: EdgeServicePublishMessageMode, data: Object | String | Buffer): boolean;
}
/**
 * SDK to interface with the Edge Historian
 */
export interface IEdgeHistorianSDK {
    /**
     * Allows to track connectivity of data source
     */
    subscriptionsHealthStatus: Observable<IEdgeHistorianDataSubscriptionsStatus>;
    isMqttConnected$: Observable<boolean>;
    /**
     *
     * @param subscriptionInfo historian record subscription configuration
     * @param callback a function that is called when data is received from the historian.
     * @returns a UUID string representing the subscription ID
     */
    subscribeToDataChange(subscriptionInfo: IEdgeHistorianDataInfo, callback: EdgeHistorianDataCallback): string;
    /**
     * Unsubscribes from an existing subscription
     * @param subscriptionId a UUID string representing a subscription ID
     */
    unsubscribeFromHistorianDataChange(subscriptionId: string): void;
    /**
     * Registers a new publisher to a Historian Record/Descriptor
     * @param publisherInfo historian record publish configuration
     * @returns a UUID string representing a publisher ID
     */
    registerHistorianDataPublisher(publisherInfo: IEdgeHistorianDataInfo): Promise<string>;
    /**
     * Unregisters an existing publisher
     * @param publisherId a UUID string representing a publisher ID
     */
    unregisterHistorianDataPublisher(publisherId: string): void;
    /**
     * Publishes a message the historian via a registered publisher
     * @param publisherId a UUID string representing a publisher ID
     * @param data the data to send to the historian.  Data must implement [[IEdgeData]]
     */
    publishDataToHistorian(publisherId: string, data: IEdgeData): Promise<void>;
    /**
     * Perform a historical query to the edge historian.
     * Supports query types that implement [[IEdgeHistorianDataQuery]]
     * @param query
     */
    queryHistorianData(query: IEdgeHistorianDataQuery): Promise<IEdgeHistorianData>;
}
/**
 * SDK to create and manage IoT modules
 */
export interface IEdgeIotManagementSDK {
    getIoTHealthStatus(): Observable<IEdgeIoTDataSourceStatus>;
    getSensors(): IEdgeIotModule[];
    getPublishers(): IEdgeIotModule[];
    getPublishersMeta(): Promise<IUmsMeta[]>;
    start(): Promise<void>;
    stop(): Promise<void>;
    delete(): Promise<void>;
}
/**
 * SDK to interface with the Edge API and manage Edge Telemetry Services
 */
export interface IEdgeTelemetrySDK {
    /**
     * Creates a custom telemetry service and subscribes to its output.
     * This is the most capable, but also most complex way to get telemetry data.
     * @param apiRequest Configures the telemetry service
     * @param callback A callback function that will be called when data is received.
     * @returns A UUID string with the service ID
     */
    createCustomTelemetryServiceSubscription(apiRequest: EdgeTelemetryRequest, callback: EdgeTelemetryDataCallback): string;
    /**
     * Creates an Edge Inbound Telemetry service and subscribes to its output
     * This is the simplest way to receive data coming from the Edge IoT gateway
     * @param sdkRequest configures the telemetry service
     * @param callback A callback function that will be called when data is received.
     * @returns A UUID string with the service ID
     */
    createInboundTelemetryServiceSubscription(sdkRequest: EdgeTelemetryInboundDataRequest, callback: EdgeTelemetryDataCallback): string;
    /**
     * Removes an existing telemetry service by ID
     * @param serviceId A UUID string with the service ID
     */
    removeTelemetryServiceById(serviceId: string): void;
    /**
     * Creates new telemetry stream via Edge API based on provided request info using
     * @param edgeTelemetryRequest request info IEdgeTelemetryServiceRequest
     */
    registerTelemetryService(edgeTelemetryRequest: IEdgeTelemetryServiceRequest): Promise<IEdgeTelemetrySubscriptionResponse>;
}
/**
 * EdgeSDK Configuration class.  These properties can be passed the in constructor of [[EdgeSDK]]
 * Properties are overwritten by environment variables
 */
export declare class EdgeSDKConfig {
    /**
     * Provide path to local json config file instead of explicitly setting values
     * json file should have the same filed names as this class fields
     * note ENV variable will have priority than config file values
     */
    configFilePath?: string;
    /**
     * The IP or hostname of the edgeAPI service
     * Optionally set this property to override the default Edge API Host
     * This property is overwritten by the environment variable: EDGE_API_HOST
     */
    edgeApiHost?: string;
    /**
     * The port number of the edgeAPI service
     * Optionally set this property to override the default Edge API port
     * This property is overwritten by the environment variable: EDGE_API_PORT
     */
    edgeApiPort?: string;
    /**
     * The IP or hostname of the mqtt broker
     * Optionally set this property to override the default Edge MQTT Broker
     * This property is overwritten by the environment variable: EDGE_MQTT_HOST
     */
    edgeMqttHost?: string;
    /**
     * The port number of the edgeAPI service
     * Optionally set this property to override the default Edge MQTT port
     * This property is overwritten by the environment variable: EDGE_MQTT_PORT
     */
    edgeMqttPort?: string;
    /**
     * The IP or hostname of the edge IoT Management (OSH) service
     * Optionally set this property to override the default Edge API Host
     * This property is overwritten by the environment variable: EDGE_IOT_HOST
     */
    edgeIoTHost?: string;
    /**
     * The port number of the IoT Management (OSH) service
     * Optionally set this property to override the default Edge API port
     * This property is overwritten by the environment variable: EDGE_IOT_PORT
     */
    edgeIoTPort?: string;
    /**
     * Set whether or not to enable connections that stream data. If disabled, only historical queries will work
     * Optionally set this property to override the default of streaming being enabled
     * This property is overwritten by the environment variable: DISABLE_STREAMING
     */
    disableStreaming?: boolean;
    /**
     * Set whether or not to use a secure connection to the EdgeAPI and MQTT Broker
     * Optionally set this property to override the default of false
     * If the application is running inside of the same swarm network as Edge, then it should be false
     * If the application is running externally to the edge system, it should be true.
     * When secure is true, caFile, certFile, and keyFile must be set with valid TLS Certificate file locations
     * This property is overwritten by the environment variable: EDGE_API_SECURE
     */
    secure?: boolean;
    /**
     * The file path to an Edge CA certificate.
     * Only needs to be set if secure is true
     * This property is overwritten by the environment variable: EDGE_TLS_CA_FILE
     */
    caFile?: string;
    /**
     * The file path to an Edge client certificate.
     * Only needs to be set if secure is true
     * This property is overwritten by the environment variable: EDGE_TLS_CERT_FILE
     */
    certFile?: string;
    /**
     * The file path to an Edge client certificate private key.
     * Only needs to be set if secure is true
     * This property is overwritten by the environment variable: EDGE_TLS_KEY_FILE
     */
    keyFile?: string;
    /**
     * Mongo DB connection string
     */
    mongoConnection?: string;
    /**
     * Rabbit MQ connection string
     */
    rabbitConnection?: string;
    /**
     * Provide path to local iot-config.json file for IoT modules config
     * mandatory for IoT management to start (create IoT modules)
     * if not set SDK will try to access iot-config.json in project root folder
     */
    iotConfigPath?: string;
}
/**
 * The entry point class for the Edge SDK.
 * This class contains API calls for Edge Historian, Edge Telemetry, and Edge Service to Service Communication
 */
export declare class EdgeSDK {
    private _edgeHistorianSdk;
    private _edgeTelemetrySdk;
    private _edgeIoTManagementSDK;
    private _edgeServiceCommunicationSdk;
    private _commonMiddleware;
    private _serviceProvider;
    private _routerProvider;
    private _httpsAgent;
    private _config;
    private _endpoints;
    /**
     * The Edge Historian SDK
     */
    get historian(): IEdgeHistorianSDK;
    /**
     * The Edge Telemetry SDK
     */
    get telemetry(): IEdgeTelemetrySDK;
    /**
     * The Edge Service to Service SDK
     */
    get serviceComm(): IEdgeServiceCommunicationSDK;
    /**
     * The Edge IoT Management SDK
     */
    get iotManagement(): IEdgeIotManagementSDK;
    get commonMiddleware(): ICommonMiddleware;
    initCommonMiddleware(config: ICommonMiddlewareConfig): void;
    /**
     * Service provider
     */
    get serviceProvider(): IServiceProvider;
    /**
     * Router provider - provides configured API routes
     */
    get routerProvider(): IRouterProvider;
    /**
     * Constructs an EdgeSDK Object
     * @param config optionally pass config parameters to customize SDK runtime. These properties are overwritten by environment variables listed in [[EdgeSDKConfig]]
     */
    constructor(config?: EdgeSDKConfig);
}
//# sourceMappingURL=edgeSDK.d.ts.map