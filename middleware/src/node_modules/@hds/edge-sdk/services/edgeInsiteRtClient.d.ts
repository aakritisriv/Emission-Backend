/// <reference types="node" />
import * as https from 'https';
import { Observable } from 'rxjs';
import { IHistorianRecordRowsByDepthQuery, IHistorianRecordRowsByTimeQuery, IHistorianRecordRowsQuery, IHistorianRecordWriteRowsQuery } from '../historian';
import { IEdgeHistorianData } from '../models/api/historian/edgeHistorianData';
import { IEdgeHistorianDataInfo } from '../models/api/historian/edgeHistorianDataInfo';
import { IEdgeHistorianSubscriptionDataInfo } from '../models/api/historian/edgeHistorianDataSubscriptionInfo';
import { IEdgeData } from '../models/edgeData';
import { EdgeHistorianDataCallback } from '../models/historian/edgeHistorianCallbacks';
import { IEdgeHistorianDataSubscriptionsStatus } from '../models/historian/edgeHistorianDataSubscriptionsHealthStatus';
import { IInsiteInfo } from './../models/historian/edgeApiResponses';
import { IServiceProvider } from './common/service.provider';
export declare class EdgeInsiteRtClient {
    subscriptionsHealthStatus: Observable<IEdgeHistorianDataSubscriptionsStatus>;
    get isMqttConnected$(): Observable<boolean>;
    private mqttClient;
    private clientId;
    private primaryBridgeInfo;
    private connectionMonitor;
    private heartbeatInterval;
    private subscriptionAliveInterval;
    private edgeInsiteApiBase;
    private edgeBridgeApiBase;
    private realTimeSubscriptionExtension;
    private realTimePublisherExtension;
    private edgeApiAddress;
    private topicCallbackMap;
    private requestedSubscriptions;
    private requestedPublishers;
    private httpsAgent;
    constructor(serviceProvider: IServiceProvider, edgeApiAddress: string, httpsAgent: https.Agent, disableStreaming: boolean);
    createDataSubscription(dataInfo: IEdgeHistorianDataInfo, callback: EdgeHistorianDataCallback): string;
    removeDataSubscription(subscriptionId: string): Promise<void>;
    createDataPublisher(dataInfo: IEdgeHistorianDataInfo): string;
    removeDataPublisher(publisherId: string): void;
    publishDataToPublisher(publisherId: string, data: IEdgeData): void;
    getRecordLastRow(recordQuery: IEdgeHistorianDataInfo): Promise<IEdgeHistorianData>;
    getRecordRows(recordQuery: IHistorianRecordRowsQuery): Promise<IEdgeHistorianData>;
    getRecordRowsByTime(recordQuery: IHistorianRecordRowsByTimeQuery): Promise<IEdgeHistorianData>;
    getRecordRowsByDepth(recordQuery: IHistorianRecordRowsByDepthQuery): Promise<IEdgeHistorianData>;
    writeRecordRows(recordQuery: IHistorianRecordWriteRowsQuery): Promise<IEdgeHistorianData>;
    restoreSubscriptions(): Promise<any[]>;
    stopSubscriptions(): Promise<any[]>;
    getSubscriptionsUpdateStatus(status: {
        hasInvalidVariables: boolean;
        connected: boolean;
    }): IEdgeHistorianSubscriptionDataInfo[];
    getBridgeId(): Promise<IInsiteInfo>;
    private hasInvalidVariables;
    private initializeSubscriptionsHealthStatus;
    private logError;
    private stopSubscription;
    private getDataBaseUrl;
    private getClientSubscriptionsBaseUrl;
    private getClientPublisherBaseUrl;
    private startSubscription;
    private stopPublisher;
    private startPublisher;
    private checkIfSubscriptionIsAlive;
    private checkIfPublisherIsAlive;
    private sendHeartbeatForClient;
    private setupMqttOptions;
    private onBridgeStatus;
    private setPrimaryBridgeInfo;
}
//# sourceMappingURL=edgeInsiteRtClient.d.ts.map