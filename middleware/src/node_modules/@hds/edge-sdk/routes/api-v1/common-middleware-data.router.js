"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommonMiddlewareDataRouter = void 0;
const express_validator_1 = require("express-validator");
const resultStatusObject_1 = require("../../models/api/resultStatusObject");
const route_1 = require("../route");
/**
 * Express router to enable API data routes
 */
class CommonMiddlewareDataRouter extends route_1.BaseRoute {
    constructor(dataProcessor, dataSubscription, rmq) {
        super();
        this.path = '/api/v1/data';
        /**
         * GET /receivedData returns all cached variables and received values, no matter if there were subscriptions for those
         */
        this.getReceivedData = async (req, res) => {
            try {
                const result = this.dataProcessor.getCacheDataMessage();
                if (!result) {
                    this.sendResponse(undefined, res, 'No data cache available', 400);
                    return;
                }
                this.sendResponse(result, res);
            }
            catch (error) {
                this.sendResponse(undefined, res, error.message);
            }
        };
        /**
         * GET /:subscriptionName - returns received data for specific subscription
         */
        this.getDataBySubscriptionName = async (req, res) => {
            try {
                const uniqueName = req.params.subscriptionName;
                if (!uniqueName) {
                    this.sendResponse(undefined, res, 'No subscription name provided', 400);
                    return;
                }
                const result = this.dataProcessor.getSubscriptionData(uniqueName);
                if (!result) {
                    const resultObject = new resultStatusObject_1.ResultStatusObject();
                    resultObject.message = `No variables data available for ${uniqueName} subscription`;
                    res.send(resultObject);
                    return;
                }
                this.sendResponse(result, res);
            }
            catch (error) {
                this.sendResponse(undefined, res, error.message);
            }
        };
        /**
         * POST /publish - sends data models to be published to RMQ default exchange / uniqueName routing key
         * allowed only if RMQ enabled and config provided
         * Sent data will be converted to IEdgeData format for publishing to RMQ
         */
        this.publishDataToRMQ = async (req, res) => {
            try {
                const errorFormatter = ({ location, msg, param, value, nestedErrors }) => {
                    // Build your resulting errors however you want! String, object, whatever - it works!
                    return `${location}[${param}]: ${msg}`;
                };
                const errors = express_validator_1.validationResult(req).formatWith(errorFormatter);
                if (!errors.isEmpty()) {
                    const message = errors.array({ onlyFirstError: false });
                    this.sendResponse(undefined, res, `Input validation failed: ${message}`, 400);
                    return;
                }
                const routingKey = req.body.routingKey;
                const data = req.body.data;
                if (data == null) {
                    this.sendResponse(undefined, res, 'Request body is empty', 400);
                    return;
                }
                const edgeData = this.dataProcessor.publishDataToRMQ(data);
                this.sendResponse(edgeData, res, 'Publish request accepted');
            }
            catch (error) {
                this.sendResponse(undefined, res, error.message);
            }
        };
        this.dataProcessor = dataProcessor;
        this.rmq = rmq;
        this.dataSubscriptionManager = dataSubscription;
        /**
         * Take each handler, and attach to one of the Express.Router's
         * endpoints.
         */
        this.router.get('/receivedData', this.getReceivedData);
        this.router.get('/:subscriptionName', this.getDataBySubscriptionName);
        this.router.post('/publish', [express_validator_1.body('data').exists()], this.publishDataToRMQ);
    }
}
exports.CommonMiddlewareDataRouter = CommonMiddlewareDataRouter;
