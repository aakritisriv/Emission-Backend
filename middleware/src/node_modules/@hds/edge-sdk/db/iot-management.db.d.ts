import { IIoTModuleDB, IOshServiceDB, IOshSensorDB, IoTModuleProperty } from './iotManagementDB.model';
import { IResultStatusObject } from '../models/api/resultStatusObject';
import { IDatabaseConnection } from './databaseConnection';
export interface IIotManagementDB {
    setIoTModule(iotModule: IIoTModuleDB): Promise<IResultStatusObject<boolean>>;
    updateIoTServiceModule(iotModule: IIoTModuleDB): Promise<IResultStatusObject<boolean>>;
    updateIoTSensorModule(iotModule: IIoTModuleDB): Promise<IResultStatusObject<boolean>>;
    isIoTModuleExists(): Promise<boolean>;
    getIoTModule<T extends IOshServiceDB | IOshSensorDB>(property: IoTModuleProperty): Promise<IResultStatusObject<T[]>>;
}
export declare class IotManagementDB implements IIotManagementDB {
    private db;
    private edgeIotModule;
    private readonly _edgeIoTModuleSchema;
    constructor(db: IDatabaseConnection);
    setIoTModule(iotModule: IIoTModuleDB): Promise<IResultStatusObject<boolean>>;
    updateIoTServiceModule(iotModule: IIoTModuleDB): Promise<IResultStatusObject<boolean>>;
    updateIoTSensorModule(iotModule: IIoTModuleDB): Promise<IResultStatusObject<boolean>>;
    isIoTModuleExists(): Promise<boolean>;
    getIoTModule<T extends IOshServiceDB | IOshSensorDB>(property: IoTModuleProperty): Promise<IResultStatusObject<T[]>>;
}
//# sourceMappingURL=iot-management.db.d.ts.map