export interface ILoggingConfiguration {
    [key: string]: ILoggerMethod;
}
export interface ILoggingConfigurationSerializable {
    [key: string]: ILoggerSerializable;
}
export declare class LoggingConfigurationSerializable implements ILoggingConfigurationSerializable {
    [key: string]: ILoggerSerializable;
}
export interface ILoggerSerializable {
    enabled: boolean;
}
export interface ILogger {
    log(level: LOG_LEVEL, message: string): void;
}
export declare enum LOG_LEVEL {
    DATA_INPUT = "DATA_INPUT",
    DATA_OUTPUT = "DATA_OUTPUT",
    SYSTEM_INFO = "SYSTEM_INFO",
    WARNING = "WARNING",
    ERROR = "ERROR"
}
export declare class LoggerSerializable implements ILoggerSerializable {
    enabled: boolean;
}
export interface ILoggerMethod extends ILoggerSerializable {
    logMethod: (message: string) => void;
}
export declare class DefaultLoggerMethod implements ILoggerMethod {
    logMethod: (message: string) => void;
    enabled: boolean;
}
export declare class LoggingConfiguration implements ILoggingConfiguration {
    [key: string]: ILoggerMethod;
}
export declare class Logger implements ILogger {
    private config;
    constructor(config: ILoggingConfiguration);
    log(level: LOG_LEVEL, message: string): void;
}
//# sourceMappingURL=logger.model.d.ts.map