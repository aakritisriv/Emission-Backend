/**
 * @module Telemetry
 */
import { IEdgeRtVariableConfig, EdgeRtPublishMode } from "../api/telemetry/edgeTelemetryServiceRequest";
/**
 * Generator interface for creating a telemetry service to consume edge inbound tags
 */
export interface IEdgeTelemetryInboundDataRequest {
    /**
     * Array of [[IEdgeTelemetryVariableGroupInfo]] configurations for the groups and variables to subscribe to in edge inbound
     */
    tagConfiguration: IEdgeTelemetryVariableGroupInfo[];
    /**
     * The rate at which the telemetry service will perform coercion/calculations and publish data
     * If unset, uses the telemetry service default publish interval of 1000ms
     */
    publishInterval?: number;
    /**
     * The mode in which to publish data.
     * If unset, defaults to ALWAYS
     */
    publishMode?: EdgeRtPublishMode;
}
/**
 * Configuration of the group and variables to subscribe to in edge inbound
 */
export interface IEdgeTelemetryVariableGroupInfo {
    /**
     * The group name to subscribe to
     */
    group: string;
    /**
     * The array of [[IEdgeRtVariableConfig]] which contains variable configuration for requested edge inbound tags in the subscribed group
     */
    variables: IEdgeRtVariableConfig[];
}
/**
 * Configuration of the group and variables to subscribe to in edge inbound
 */
export declare class EdgeTelemetryVariableGroupinfo implements IEdgeTelemetryVariableGroupInfo {
    /**
     * The group name to subscribe to
     */
    group: string;
    /**
     * The array of [[IEdgeRtVariableConfig]] which contains variable configuration for requested edge inbound tags in the subscribed group
     */
    variables: IEdgeRtVariableConfig[];
}
/**
 * Configuration options for inbound telemetry subscriptions
 */
export interface IEdgeTelemetryInboundDataRequestOptions {
    /**
     * The rate at which the telemetry service will perform coercion/calculations and publish data
     * If unset, uses the telemetry service default publish interval of 1000ms
     */
    publishInterval?: number;
    /**
     * The mode in which to publish data.
     * If unset, defaults to ALWAYS
     */
    publishMode?: EdgeRtPublishMode;
}
export declare class EdgeTelemetryInboundDataRequest implements IEdgeTelemetryInboundDataRequest {
    /**
     * Array of [[IEdgeTelemetryVariableGroupInfo]] configurations for the groups and variables to subscribe to in edge inbound
     */
    tagConfiguration: EdgeTelemetryVariableGroupinfo[];
    /**
     * The rate at which the telemetry service will perform coercion/calculations and publish data
     * If unset, uses the telemetry service default publish interval of 1000ms
     */
    publishInterval?: number;
    /**
     * The mode in which to publish data.
     * If unset, defaults to ALWAYS
     */
    publishMode?: EdgeRtPublishMode;
    /**
     *
     * @param tagConfiguration Array of [[IEdgeTelemetryVariableGroupInfo]] configurations for the groups and variables to subscribe to in edge inbound
     * @param options Configuration options for inbound telemetry subscriptions
     */
    constructor(tagConfiguration: EdgeTelemetryVariableGroupinfo[], options?: IEdgeTelemetryInboundDataRequestOptions);
}
//# sourceMappingURL=edgeTelemetrySdkRequests.d.ts.map