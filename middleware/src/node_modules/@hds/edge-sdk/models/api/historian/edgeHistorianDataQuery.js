"use strict";
/**
 * @module Historian
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EdgeHistorianQuerySearchDirection = exports.EdgeHistorianDataQueryType = exports.HistorianRecordWriteRowsQuery = exports.HistorianRecordRowsByDepthQuery = exports.HistorianRecordRowsByTimeQuery = exports.HistorianRecordRowsQuery = exports.HistorianLastRowQuery = exports.EdgeHistorianDataQueryBase = void 0;
/**
 * abstract implementation of [[IEdgeHistorianDataQuery]] with common properties
 */
class EdgeHistorianDataQueryBase {
    /**
     * abstract class constructor used to populate common properties
     * @param dataInfo metadata for a historian query
     */
    constructor(dataInfo) {
        if (dataInfo == undefined) {
            throw Error('dataInfo (IEdgeDataInfo) parameter cannot be undefined');
        }
        this.record = dataInfo.record;
        this.descriptor = dataInfo.descriptor;
        this.isWellBased = dataInfo.isWellBased;
        this.variables = dataInfo.variables;
    }
}
exports.EdgeHistorianDataQueryBase = EdgeHistorianDataQueryBase;
/**
 * An implementation of [[IHistorianLastRowQuery]] used to query the last rows of a record/descriptor
 * Extends [[EdgeHistorianDataQueryBase]] which contains common properties for historian queries
 */
class HistorianLastRowQuery extends EdgeHistorianDataQueryBase {
    /**
     * Constructs a HistorianLastRowQuery Object
     * @param dataInfo Metadata describing the record/descriptor/variables to query
     */
    constructor(dataInfo) {
        super(dataInfo);
        /**
         * The type of the query.  This property is read only
         */
        this.type = EdgeHistorianDataQueryType.LAST_ROW;
    }
}
exports.HistorianLastRowQuery = HistorianLastRowQuery;
/**
 * An implementation of [[IHistorianRecordRowsQuery]] used to query rows of a record/descriptor
 * Extends [[EdgeHistorianDataQueryBase]] which contains common properties for historian queries
 */
class HistorianRecordRowsQuery extends EdgeHistorianDataQueryBase {
    /**
     * Constructs a HistorianRecordRowsQuery Object
     * @param dataInfo Metadata describing the record/descriptor/variables to query
     * @param count The number of rows to read from the record starting at the offset position
     * @param offset The number of rows to skip before reading.  This offset is biased based on the searchDirection
     * @param searchDirection The direction to read rows.  Supports Up (From Bottom) and Down (From Top);
     */
    constructor(dataInfo, count = undefined, offset = 0, searchDirection = EdgeHistorianQuerySearchDirection.DOWN) {
        super(dataInfo);
        /**
         * The type of the query.  This property is read only
         */
        this.type = EdgeHistorianDataQueryType.MULTI_ROW;
        this.count = count;
        this.offset = offset;
        this.searchDirection = searchDirection;
    }
}
exports.HistorianRecordRowsQuery = HistorianRecordRowsQuery;
/**
 * An implementation of [[IHistorianRecordRowsByTimeQuery]] used to query rows by time of a record/descriptor
 * Extends [[EdgeHistorianDataQueryBase]] which contains common properties for historian queries
 */
class HistorianRecordRowsByTimeQuery extends EdgeHistorianDataQueryBase {
    /**
     * Constructs a HistorianRecordRowsByTimeQuery Object
     * @param dataInfo Metadata describing the record/descriptor/variables to query
     * @param startTime The query start time represented as an epoch time in milliseconds
     * @param endTime The query start time represented as an epoch time in milliseconds
     */
    constructor(dataInfo, startTime = 0, endTime = Date.now()) {
        super(dataInfo);
        /**
         * The type of the query.  This property is read only
         */
        this.type = EdgeHistorianDataQueryType.TIME_BASED;
        this.startTime = startTime;
        this.endTime = endTime;
    }
}
exports.HistorianRecordRowsByTimeQuery = HistorianRecordRowsByTimeQuery;
/**
 * An implementation of [[IHistorianRecordRowsByDepthQuery]] used to query rows by depth of a record/descriptor
 * Extends [[EdgeHistorianDataQueryBase]] which contains common properties for historian queries
 */
class HistorianRecordRowsByDepthQuery extends EdgeHistorianDataQueryBase {
    /**
     * Constructs a HistorianRecordRowsByDepthQuery Object
     * @param dataInfo Metadata describing the record/descriptor/variables to query
     * @param startDepth The query start depth
     * @param endDepth The query end depth
     */
    constructor(dataInfo, startDepth = 0, endDepth = Number.MAX_SAFE_INTEGER) {
        super(dataInfo);
        /**
         * The type of the query.  This property is read only
         */
        this.type = EdgeHistorianDataQueryType.DEPTH_BASED;
        this.startDepth = startDepth;
        this.endDepth = endDepth;
    }
}
exports.HistorianRecordRowsByDepthQuery = HistorianRecordRowsByDepthQuery;
/**
 * An implementation of [[IHistorianRecordWriteRowsQuery]] used to add/update rows to a record/descriptor
 * Extends [[EdgeHistorianDataQueryBase]] which contains common properties for historian queries
 * NOTE: Rows will only update if the index variable(s) match an existing row
 */
class HistorianRecordWriteRowsQuery extends EdgeHistorianDataQueryBase {
    /**
     * Constructs a HistorianRecordWriteRowsQuery Object
     * @param dataInfo Metadata describing the record/descriptor/variables to query
     * @param data Row(s) of data organized by the variables array
     * @param disableRealTime Disables real-time broadcast flag for this write
     */
    constructor(dataInfo, data, disableRealTime = false) {
        super(dataInfo);
        /**
         * The type of the query.  This property is read only
         */
        this.type = undefined;
        if (data == undefined) {
            throw Error('data (any[][]) cannot be undefined');
        }
        this.data = data;
        this.disableRealTime = disableRealTime;
    }
}
exports.HistorianRecordWriteRowsQuery = HistorianRecordWriteRowsQuery;
/**
 * Types of queries available to get data from the historian
 */
var EdgeHistorianDataQueryType;
(function (EdgeHistorianDataQueryType) {
    EdgeHistorianDataQueryType["LAST_ROW"] = "LastRow";
    EdgeHistorianDataQueryType["MULTI_ROW"] = "MultiRow";
    EdgeHistorianDataQueryType["TIME_BASED"] = "TimeBased";
    EdgeHistorianDataQueryType["DEPTH_BASED"] = "DepthBased";
    EdgeHistorianDataQueryType["WRITE_ROWS"] = "WriteRows";
})(EdgeHistorianDataQueryType = exports.EdgeHistorianDataQueryType || (exports.EdgeHistorianDataQueryType = {}));
/**
 * Types of serach direction available for supported queries
 */
var EdgeHistorianQuerySearchDirection;
(function (EdgeHistorianQuerySearchDirection) {
    EdgeHistorianQuerySearchDirection["UP"] = "Up";
    EdgeHistorianQuerySearchDirection["DOWN"] = "Down";
})(EdgeHistorianQuerySearchDirection = exports.EdgeHistorianQuerySearchDirection || (exports.EdgeHistorianQuerySearchDirection = {}));
