"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommonMiddlewareDataSubscriptionRouter = void 0;
const express_validator_1 = require("express-validator");
const resultStatusObject_1 = require("../../models/api/resultStatusObject");
const route_1 = require("../route");
/**
 * Express router to enable data subscription API routes
 * data subscriptions used for UIs to subscribe for specific variables data retrieval
 */
class CommonMiddlewareDataSubscriptionRouter extends route_1.BaseRoute {
    constructor(dataProcessor, dataSubscription) {
        super();
        this.path = '/api/v1/subscription';
        /**
         * GET /all - returns all registered subscriptions info
         */
        this.getRegisteredSubscriptions = async (req, res) => {
            try {
                const result = this.dataSubscription.getSubscriptions();
                if (!result) {
                    this.sendResponse(undefined, res, 'No data subscriptions registered', 400);
                    return;
                }
                this.sendResponse(result, res);
            }
            catch (error) {
                this.sendResponse(undefined, res, error.message);
            }
        };
        /**
         * POST /register - registers data subscription under uniqueName key
         */
        this.registerSubscription = async (req, res) => {
            try {
                const errorFormatter = ({ location, msg, param, value, nestedErrors }) => {
                    // Build your resulting errors however you want! String, object, whatever - it works!
                    return `${location}[${param}]: ${msg}`;
                };
                const errors = express_validator_1.validationResult(req).formatWith(errorFormatter);
                if (!errors.isEmpty()) {
                    const message = errors.array({ onlyFirstError: false });
                    this.sendResponse(undefined, res, `Input validation failed: ${message}`, 400);
                    return;
                }
                const subscriptionInfo = req.body;
                this.dataSubscription.addSubscription(subscriptionInfo);
                const dataResult = this.dataProcessor.getSubscriptionData(subscriptionInfo.uniqueName);
                if (!dataResult) {
                    const resultObject = new resultStatusObject_1.ResultStatusObject();
                    resultObject.message = `No variables data available for ${subscriptionInfo.uniqueName} subscription`;
                    res.send(resultObject);
                    return;
                }
                this.sendResponse(dataResult, res);
            }
            catch (error) {
                this.sendResponse(undefined, res, error.message);
            }
        };
        this.dataProcessor = dataProcessor;
        this.dataSubscription = dataSubscription;
        /**
         * Take each handler, and attach to one of the Express.Router's
         * endpoints.
         */
        this.router.get('/all', this.getRegisteredSubscriptions);
        this.router.post('/register', [express_validator_1.body('uniqueName').isString(), express_validator_1.body('variables').isArray({ min: 1 })], this.registerSubscription);
    }
}
exports.CommonMiddlewareDataSubscriptionRouter = CommonMiddlewareDataSubscriptionRouter;
