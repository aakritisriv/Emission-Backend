"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggerServiceRouter = void 0;
const logger_model_1 = require("../../models/common/logger.model");
const route_1 = require("../route");
/**
 * Express Router to enable logger configuration by REST API
 */
class LoggerServiceRouter extends route_1.BaseRoute {
    constructor(logService) {
        super();
        this.path = '/api/v1/logger';
        /**
         * GET /levels - logging levels
         */
        this.getLoggingLevels = async (req, res, next) => {
            try {
                const result = Object.values(logger_model_1.LOG_LEVEL);
                this.sendResponse(result, res);
            }
            catch (error) {
                this.sendResponse(undefined, res, error.message);
            }
        };
        /**
         * GET /config - logging configuration
         */
        this.getConfig = async (req, res, next) => {
            try {
                const result = this.logService.getConfig();
                this.sendResponse(result, res);
            }
            catch (error) {
                this.sendResponse(undefined, res, error.message);
            }
        };
        /**
         * POST /config - logging configuration
         */
        this.setConfig = async (req, res, next) => {
            try {
                if (req.body == null) {
                    this.sendResponse(undefined, res, 'Request must have body', 400);
                    return;
                }
                const updatedConfig = this.logService.updateConfig(req.body);
                this.sendResponse(updatedConfig, res);
            }
            catch (error) {
                this.sendResponse(undefined, res, error.message);
            }
        };
        this.logService = logService;
        this.init();
    }
    /**
     * Take each handler, and attach to one of the Express.Router's
     * endpoints.
     */
    init() {
        this.router.get('/levels', this.getLoggingLevels);
        this.router.get('/config', this.getConfig);
        this.router.post('/config', this.setConfig);
    }
}
exports.LoggerServiceRouter = LoggerServiceRouter;
