import { IDataProcessor } from '../../services/middleware/data-processor.service';
import { IDataSubscriptionManager } from '../../services/middleware/data-subscription-manager';
import { RmqDataService } from '../../services/middleware/rmq-data.service';
import { BaseRoute } from '../route';
/**
 * Express router to enable API data routes
 */
export declare class CommonMiddlewareDataRouter extends BaseRoute {
    readonly path = "/api/v1/data";
    private dataProcessor;
    private rmq?;
    private dataSubscriptionManager;
    constructor(dataProcessor: IDataProcessor, dataSubscription: IDataSubscriptionManager, rmq?: RmqDataService);
    /**
     * GET /receivedData returns all cached variables and received values, no matter if there were subscriptions for those
     */
    getReceivedData: (req: any, res: any) => Promise<void>;
    /**
     * GET /:subscriptionName - returns received data for specific subscription
     */
    getDataBySubscriptionName: (req: any, res: any) => Promise<void>;
    /**
     * POST /publish - sends data models to be published to RMQ default exchange / uniqueName routing key
     * allowed only if RMQ enabled and config provided
     * Sent data will be converted to IEdgeData format for publishing to RMQ
     */
    publishDataToRMQ: (req: any, res: any) => Promise<void>;
}
//# sourceMappingURL=common-middleware-data.router.d.ts.map