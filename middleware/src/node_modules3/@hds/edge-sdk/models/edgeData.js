"use strict";
/**
 * @module EdgeSDK
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EdgeData = void 0;
/**
 * An implementation of [[IEdgeData]] which gives access to helper functions
 * that are useful for parsing its data.
 */
class EdgeData {
    constructor() {
        /** Message metadata */
        this.info = {
            timestamp: Date.now(),
            sequenceNo: 0
        };
        /** Variables representing data columns  */
        this.variables = [];
        /** Row(s) of data organized by the variables array */
        this.data = [];
    }
    /**
     * @inheritDoc
     * @param variable
     */
    getVariablePosition(variable) {
        let variableIndex = this.variables.indexOf(variable);
        if (variableIndex == undefined || variableIndex < 0) {
            return undefined;
        }
        return variableIndex;
    }
    /**
     * @inheritDoc
     * @param variablePos
    */
    getVariableNameAtPosition(variablePos) {
        if (variablePos < 0 || variablePos >= this.variables.length) {
            throw Error("Invalid Variable Position. Must be between 0 and the length of the array");
        }
        return this.variables[variablePos];
    }
    /**
     * @inheritDoc
     * @param rowPos
     * @param variable
     */
    getVariableInRow(rowPos, variable) {
        let variableIndex = this.getVariablePosition(variable);
        if (variableIndex == undefined) {
            throw Error("Invalid Variable. Must exist in the dataset");
        }
        if (rowPos < 0 || rowPos >= this.data.length) {
            throw Error("Invalid Row Position. Must be between 0 and the length of the array");
        }
        return this.data[rowPos][variableIndex];
    }
    /**
     * @inheritDoc
     * @param rowPos
     * @param variablePos
     */
    getValue(rowPos, variablePos) {
        return this.data[rowPos][variablePos];
    }
    /**
     * @inheritDoc
     * @param variable
    */
    getAllRowsForVariable(variable) {
        let variableIndex = this.variables.indexOf(variable);
        if (variableIndex == undefined || variableIndex < 0) {
            throw Error("Variable does not exist in dataset");
        }
        if (this.data.length == 0) {
            return [];
        }
        let result = [];
        this.data.forEach(row => {
            result.push(row[variableIndex]);
        });
        return result;
    }
}
exports.EdgeData = EdgeData;
