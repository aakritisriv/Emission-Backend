/**
 * @module Telemetry
 */
/**
 * Request options for configuring telemetry
 */
export interface IEdgeTelemetryServiceRequest {
    /**
     * A list of streaming data sources that are inputs to the telemetry service
     */
    dataSources: IEdgeRtDataSourceConfig[];
    /**
     * Configuration options for where the telemetry service publishes to.
     * Only [MQTTPublisherConfig] is compatible with the SDK at this time.
     * If unset, it will automatically configure
     */
    publisherConfig?: RMQPublisherConfig | MQTTPublisherConfig | PersistencePublisherConfig;
    /**
     * Configuration of client/server healthchecks and heartbeats
     * It will self configure if unset.
     */
    serviceCheckConfig?: IEdgeServiceCheckConfig;
    /**
     * The rate at which the telemetry service will perform coercion/calculations and publish data
     * If unset, uses the telemetry service default publish interval of 1000ms
     */
    publishInterval?: number;
    /**
     * This property is unused and will be ignored
     */
    mode?: EdgeRtMode;
    /**
     * This property is not compatible with the SDK and will be forced to false
     * Makes the telemetry service persistent.
     */
    readonly persistent?: boolean;
    /**
     * this property is optional but user can provide some user friendly name
     * So that user can identify service names in portainer/telemetry UI
     */
    serviceName?: string;
}
/**
 * Data source configuration for the telemetry service.
 * All data is expected to come in Edge API format.
 */
export interface IEdgeRtDataSourceConfig {
    /**
     * An array of variable configurations for the data source
     */
    variables: IEdgeRtVariableConfig[];
    /**
     * The configuration of the data source
     * Support RabbitMQ, MQTT, and Calculated Sources
     */
    sourceConfig: RMQSourceConfig | MQTTSourceConfig | CalculatedSourceConfig | undefined;
}
/**
 * RT Variable Configuration for a data source in the telemetry service
 */
export interface IEdgeRtVariableConfig {
    /**
     * The variable name of the incoming data
     */
    inputName: string;
    /**
     * The variable name to assign to the coerced/calculated value
     * Defaults to the same as inputName if unset.
     */
    outputName?: string;
    /**
     * The coercion/calc mode for the variable.
     */
    mode: EdgeRtVariableMode;
    /**
     * The configuation for a signal that is set with [[EdgeRtVariableMode]] as CALC
     * Use this to configure the formula and params to use for the calculation
     */
    calculatedSignalConfig?: ICalculatedSignalConfig;
    /**
     * Sets whether the signal should be broadcast by the publisher or not
     * This is useful when an input is used in a calculation, but is not needed by the external service subscribing to the telemetry data.
     * Defaults to true if unset.
     */
    publish?: boolean;
    /**
     * Sets the timeout in milliseconds before a value expires and starts broadcasting using its default value
     */
    lastValueTimeout?: number | undefined;
    /**
     * Sets the default value to use when either a value has not been received or the timeout expires for a variable.
     * If unset, defaults to null
     */
    defaultValue?: any | undefined;
}
/**
 * Configuration of calculated signals
 */
export interface ICalculatedSignalConfig {
    /**
     * The formula to evaluate at each publish interval.
     * The format of a formula is standard math operators and single brackets wrapping param names
     * example: "{RPM} + {FlowRate} * .29"
     */
    formula: string;
    /**
     * The parameters to use in the formula.
     * These should match the outputName of streaming variables.
     * At this time, calculated values cannot be an input to other calculations
     * example: ["RPM", "FlowRate"]
     */
    params: string[];
}
/**
 * The base configuration interface which holds the type of data source
 */
export interface ISourceConfigBase {
    /**
     * The type of data source to stream data from to the telemetry service
     */
    readonly type: EdgeRtSource;
}
/**
 * Configuration of the Telemetry Service Publisher
 */
export interface IPublisherConfigBase {
    /**
     * The type of streaming broker to publish streaming data to.
     * Currently only MQTT is compatible with the SDK
     */
    readonly type: EdgeRtDestination;
    /**
     * The mode in which to publish data.
     * If unset, defaults to ALWAYS
     */
    mode?: EdgeRtPublishMode;
}
/**
 * Configuration for a RabbitMQ Streaming Data Source
 */
export declare class RMQSourceConfig implements ISourceConfigBase {
    /**
     * The type of data source to stream data from to the telemetry service.
     * This property is readonly
     */
    readonly type: EdgeRtSource;
    /**
     * The exchange to subscribe to
     */
    exchange: string;
    /**
     * The corresponding exchange type to the subscribed exchange.
     * Must be one of the following: 'fanout', 'direct', or 'topic'
     */
    exchangeType: string;
    /**
     * Should the exchange persist past the lifecycle of connections to it
     */
    durable?: boolean;
    /**
     * Specify a queue name to attach to. useful for scaling subscription clients.
     * Should generally be unset to allow dynamic creation/deletion
     * If unset, a dynamic queue name will be created
     */
    queue?: string;
    /**
     * Sets whether the queue can only be used by this service or other services can share it.
     */
    queueExclusive?: boolean;
    /**
     * The routing key that data should be subscribed from
     * Only compatible with Topic and Direct exchange types
     */
    routingKey?: string;
    /**
     * Constructs a RMQSourceConfig Object
     * @param exchange The exchange to subscribe to
     * @param exchangeType The corresponding exchange type to the subscribed exchange.
     * Must be one of the following: 'fanout', 'direct', or 'topic'
     * @param durable Should the exchange persist past the lifecycle of connections to it
     * @param routingKey The routing key that data should be subscribed from. Only compatible with Topic and Direct exchange types
     */
    constructor(exchange?: string, exchangeType?: string, durable?: boolean, routingKey?: string);
}
/**
 * The abstract base class for publisher configuration.
 * Contains common properties for publisher configuration
 */
export declare abstract class PublisherConfigBase implements IPublisherConfigBase {
    /**
     * The type of data broker to stream data to.
     * This property is readonly
     */
    abstract readonly type: EdgeRtDestination;
    /**
     * The mode in which to publish data.
     * If unset, defaults to ALWAYS
     */
    mode?: EdgeRtPublishMode;
}
/**
 * Configuration for a RabbitMQ publisher
 * This is not currently compatible with the EdgeSDK and should only be used by applications
 * with independent RabbitMQ connections and the Edge API
 */
export declare class RMQPublisherConfig extends PublisherConfigBase {
    /**
     * The type of data source to stream data from to the telemetry service
     * This property is readonly
     */
    readonly type: EdgeRtDestination;
    /**
     * The exchange to publish to
     */
    exchange: string;
    /**
     * The corresponding exchange type to the publish exchange.
     */
    exchangeType: string;
    /**
     * Should the exchange persist past the lifecycle of connections to it
     */
    durable?: boolean;
    /**
     * The routing key that data should be published to. Only compatible with Topic and Direct exchange types
     */
    routingKey?: string;
    /**
     * Constructs a RMQPublisherConfig Object
     * @param exchange The exchange to publish to
     * @param exchangeType The corresponding exchange type to the publish exchange.
     * Must be one of the following: 'fanout', 'direct', or 'topic'
     * @param durable Should the exchange persist past the lifecycle of connections to it
     * @param routingKey The routing key that data should be subscribed from. Only compatible with Topic and Direct exchange types
     */
    constructor(exchange?: string, exchangeType?: string, durable?: boolean, routingKey?: string);
}
/**
 * Configuration for an MQTT Publisher
 */
export declare class MQTTPublisherConfig extends PublisherConfigBase {
    /**
     * The publisher type. This is a readonly property
     */
    readonly type: EdgeRtDestination;
    /**
     * The mqtt topic to publish to
     * If unset, this will be dynamically generated
     */
    topic?: string;
    /**
     * Constructs a MQTTPublisherConfig
     * @param topic The mqtt topic to publish to. If unset, this will be dynamically generated
     */
    constructor(topic?: string);
}
/**
 * @hidden
 * Not Implemented
 */
export declare class PersistencePublisherConfig extends PublisherConfigBase {
    type: EdgeRtDestination;
    record: string;
    descriptor: string;
    isWellBased: boolean;
    constructor();
}
/**
 * Calculated sources take the output of coerced variables and apply a function
 */
export declare class CalculatedSourceConfig implements ISourceConfigBase {
    /**
     * The source type. This is a readonly property
     */
    type: EdgeRtSource;
}
/**
 * Configuration for an MQTT Data Source
 */
export declare class MQTTSourceConfig implements ISourceConfigBase {
    /**
     * The source type. This is a readonly property
     */
    readonly type: EdgeRtSource;
    /**
     * The MQTT topic to subscribe to.
     * If unset, dynamically generates
     */
    topic?: string;
    constructor(topic?: string);
}
/**
 * Configuration of client/server healthchecks and heartbeats
 */
export interface IEdgeServiceCheckConfig {
    /**
     * sets the MQTT topic information where the client will publish heartbeat messages
     */
    clientHeartbeatConfig: MQTTSourceConfig;
    /**
     * configures the timeout in milliseconds that the telemetry service should use to consider
     * a client as disconnected and terminate
     */
    clientHeartbeatTimeout: number;
    /**
     * sets the MQTT topic information where the telemetry service will publish alive messages to
     */
    serviceAliveConfig: MQTTPublisherConfig;
    /**
     * sets the interval that the telemetry service should broadcast alive messages
     */
    serviceAliveInterval: number;
}
/**
 * This is currently unused
 */
export declare enum EdgeRtMode {
    RAW = "RAW",
    PROCESSED = "PROCESSED"
}
/**
 * The Modes in which RT Variables can be coerced
 */
export declare enum EdgeRtVariableMode {
    /**
     * Take the average of all values received since the last publish interval
     */
    AVG = "AVG",
    /**
     * Take the latest value received.
     */
    LAST = "LAST",
    /**
     * Perform a calculation based on the output of coercion of other RT Variables.
     * Calculated Variables cannot be consumed by other calculations
     */
    CALC = "CALC"
}
/**
 * The types of RT Sources available
 */
export declare enum EdgeRtSource {
    /**
     * RabbitMQ
     */
    RMQ = "RMQ",
    /**
     * MQTT. Must be used for SDK.
     */
    MQTT = "MQTT",
    /**
     * Calculated Value. Uses RMQ/MQTT source variables
     */
    CALC = "CALC"
}
export declare enum EdgeRtDestination {
    /**
     * RabbitMQ
     */
    RMQ = "RMQ",
    /**
     * MQTT. Must be used for SDK.
     */
    MQTT = "MQTT",
    /**
     * Not Yet Implemented in the telemetry service.
     * Publish to Historian.
     */
    PERSIST = "PERSIST"
}
/**
 * The available modes to publish data from the telemetry service
 */
export declare enum EdgeRtPublishMode {
    /**
     * Always publish on publish interval
     */
    ALWAYS = "ALWAYS",
    /**
     * Check values on publish interval, only publish when new data received
     */
    CHANGE = "CHANGE"
}
/**
 * Request options for configuring telemetry
 */
export declare class EdgeTelemetryRequest implements IEdgeTelemetryServiceRequest {
    /**
     * A list of streaming data sources that are inputs to the telemetry service
     */
    dataSources: IEdgeRtDataSourceConfig[];
    /**
     * Configuration options for where the telemetry service publishes to.
     * Only [MQTTPublisherConfig] is compatible with the SDK at this time.
     * If unset, it will automatically configure
     */
    publisherConfig?: RMQPublisherConfig | MQTTPublisherConfig | PersistencePublisherConfig;
    /**
     * Configuration of client/server healthchecks and heartbeats
     * It will self configure if unset.
     */
    serviceCheckConfig?: IEdgeServiceCheckConfig;
    /**
     * The rate at which the telemetry service will perform coercion/calculations and publish data
     * If unset, uses the telemetry service default publish interval of 1000ms
     */
    publishInterval?: number;
    /**
     * This property is unused and will be ignored
     */
    mode?: EdgeRtMode;
    /**
     * This propery is not compatible with the SDK and will be forced to false
     * Makes the telemetry service persistent.
     */
    readonly persistent?: boolean;
    /**
     * construct an EdgeTelemetryRequest object
     */
    constructor();
}
/**
 * RT Variable Configuration for a data source in the telemetry service
 */
export declare class EdgeRtVariableConfig implements IEdgeRtVariableConfig {
    /**
     * The variable name of the incoming data
     */
    inputName: string;
    /**
     * The variable name to assign to the coerced/calculated value
     * Defaults to the same as inputName if unset.
     */
    outputName?: string;
    /**
     * The coercion/calc mode for the variable.
     */
    mode: EdgeRtVariableMode;
    /**
     * The configuation for a signal that is set with [[EdgeRtVariableMode]] as CALC
     * Use this to configure the formula and params to use for the calculation
     */
    calculatedSignalConfig?: ICalculatedSignalConfig;
    /**
     * Sets whether the signal should be broadcast by the publisher or not
     * This is useful when an input is used in a calculation, but is not needed by the external service subscribing to the telemetry data.
     * Defaults to true if unset.
     */
    publish?: boolean | undefined;
    /**
     * Sets the timeout in milliseconds before a value expires and starts broadcasting using its default value
     */
    lastValueTimeout?: number;
    /**
     * Sets the default value to use when either a value has not been received or the timeout expires for a variable.
     * If unset, defaults to null
     */
    defaultValue?: any | undefined;
    /**
     * Constructs an EdgeRtVariableConfig object
     */
    constructor();
}
//# sourceMappingURL=edgeTelemetryServiceRequest.d.ts.map