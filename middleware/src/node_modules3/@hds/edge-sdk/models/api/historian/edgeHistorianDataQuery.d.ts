/**
 * @module Historian
 */
import { IEdgeHistorianDataInfo } from "./edgeHistorianDataInfo";
/**
 * Interface which is the base for all queries to the historian.
 * Extends [[IEdgeHistorianDataInfo]]
 */
export interface IEdgeHistorianDataQuery extends IEdgeHistorianDataInfo {
    /**
     * The type of the query.  This property is read only
     */
    readonly type: EdgeHistorianDataQueryType;
}
/**
 * An extension of [[IEdgeHistorianDataQuery]] used to query the last row of a record/descriptor
 */
export interface IHistorianLastRowQuery extends IEdgeHistorianDataQuery {
}
/**
 * An extension of [[IEdgeHistorianDataQuery]] used to query the last rows of a record/descriptor
 */
export interface IHistorianRecordRowsQuery extends IEdgeHistorianDataQuery {
    /**
     * The number of rows to skip before reading.  This offset is biased based on the searchDirection
     */
    offset: number;
    /**
     * The number of rows to read from the record starting at the offset position
     */
    count: number;
    /**
     * The direction to read rows.  Supports Up (From Bottom) and Down (From Top);
     */
    searchDirection: EdgeHistorianQuerySearchDirection;
}
/**
 * An extension of [[IEdgeHistorianDataQuery]] used to query rows based on time of a record/descriptor
 */
export interface IHistorianRecordRowsByTimeQuery extends IEdgeHistorianDataQuery {
    /**
     * The query start time represented as an epoch time in milliseconds
     */
    startTime: number;
    /**
     * The query start time represented as an epoch time in milliseconds
     */
    endTime: number;
}
/**
 * An extension of [[IEdgeHistorianDataQuery]] used to query rows based on depth of a record/descriptor
 */
export interface IHistorianRecordRowsByDepthQuery extends IEdgeHistorianDataQuery {
    /**
     * The query start depth
     */
    startDepth: number;
    /**
     * The query end depth
     */
    endDepth: number;
}
/**
 * An implementation of [[IEdgeHistorianDataQuery]] used to write rows to a record/descriptor
 */
export interface IHistorianRecordWriteRowsQuery extends IEdgeHistorianDataQuery {
    /**
     * Disables real-time broadcast flag for this write
     */
    disableRealTime: boolean;
    /**
     * The variables to query/subscribe to.
     * Requested variables must exist in a dataset
     */
    variables: string[];
    /** Row(s) of data organized by the variables array */
    data: any[][];
}
/**
 * abstract implementation of [[IEdgeHistorianDataQuery]] with common properties
 */
export declare abstract class EdgeHistorianDataQueryBase implements IEdgeHistorianDataQuery {
    /**
     * The type of the query.  This property is read only
     */
    abstract readonly type: EdgeHistorianDataQueryType;
    /**
     * The record name of the data
     */
    record: string;
    /**
     * Is the record from the WellBased table or from a run
     */
    isWellBased: boolean;
    /**
     * The descriptor the data came from under the record
     */
    descriptor: string;
    /**
     * The variables to query/subscribe to.
     * Requested variables must exist in a dataset
     */
    variables: string[];
    /**
     * abstract class constructor used to populate common properties
     * @param dataInfo metadata for a historian query
     */
    constructor(dataInfo: IEdgeHistorianDataInfo);
}
/**
 * An implementation of [[IHistorianLastRowQuery]] used to query the last rows of a record/descriptor
 * Extends [[EdgeHistorianDataQueryBase]] which contains common properties for historian queries
 */
export declare class HistorianLastRowQuery extends EdgeHistorianDataQueryBase implements IHistorianLastRowQuery {
    /**
     * The type of the query.  This property is read only
     */
    readonly type: EdgeHistorianDataQueryType;
    /**
     * Constructs a HistorianLastRowQuery Object
     * @param dataInfo Metadata describing the record/descriptor/variables to query
     */
    constructor(dataInfo: IEdgeHistorianDataInfo);
}
/**
 * An implementation of [[IHistorianRecordRowsQuery]] used to query rows of a record/descriptor
 * Extends [[EdgeHistorianDataQueryBase]] which contains common properties for historian queries
 */
export declare class HistorianRecordRowsQuery extends EdgeHistorianDataQueryBase implements IHistorianRecordRowsQuery {
    /**
     * The type of the query.  This property is read only
     */
    readonly type: EdgeHistorianDataQueryType;
    /**
     * The number of rows to skip before reading.  This offset is biased based on the searchDirection
     */
    offset: number;
    /**
     * The number of rows to read from the record starting at the offset position
     */
    count: number;
    /**
     * The direction to read rows.  Supports Up (From Bottom) and Down (From Top);
     */
    searchDirection: EdgeHistorianQuerySearchDirection;
    /**
     * Constructs a HistorianRecordRowsQuery Object
     * @param dataInfo Metadata describing the record/descriptor/variables to query
     * @param count The number of rows to read from the record starting at the offset position
     * @param offset The number of rows to skip before reading.  This offset is biased based on the searchDirection
     * @param searchDirection The direction to read rows.  Supports Up (From Bottom) and Down (From Top);
     */
    constructor(dataInfo: IEdgeHistorianDataInfo, count?: number, offset?: number, searchDirection?: EdgeHistorianQuerySearchDirection);
}
/**
 * An implementation of [[IHistorianRecordRowsByTimeQuery]] used to query rows by time of a record/descriptor
 * Extends [[EdgeHistorianDataQueryBase]] which contains common properties for historian queries
 */
export declare class HistorianRecordRowsByTimeQuery extends EdgeHistorianDataQueryBase implements IHistorianRecordRowsByTimeQuery {
    /**
     * The type of the query.  This property is read only
     */
    readonly type: EdgeHistorianDataQueryType;
    /**
     * The query start time represented as an epoch time in milliseconds
     */
    startTime: number;
    /**
     * The query start time represented as an epoch time in milliseconds
     */
    endTime: number;
    /**
     * Constructs a HistorianRecordRowsByTimeQuery Object
     * @param dataInfo Metadata describing the record/descriptor/variables to query
     * @param startTime The query start time represented as an epoch time in milliseconds
     * @param endTime The query start time represented as an epoch time in milliseconds
     */
    constructor(dataInfo: IEdgeHistorianDataInfo, startTime?: number, endTime?: number);
}
/**
 * An implementation of [[IHistorianRecordRowsByDepthQuery]] used to query rows by depth of a record/descriptor
 * Extends [[EdgeHistorianDataQueryBase]] which contains common properties for historian queries
 */
export declare class HistorianRecordRowsByDepthQuery extends EdgeHistorianDataQueryBase implements IHistorianRecordRowsByDepthQuery {
    /**
     * The type of the query.  This property is read only
     */
    readonly type: EdgeHistorianDataQueryType;
    /**
     * The query start depth
     */
    startDepth: number;
    /**
     * The query end depth
     */
    endDepth: number;
    /**
     * Constructs a HistorianRecordRowsByDepthQuery Object
     * @param dataInfo Metadata describing the record/descriptor/variables to query
     * @param startDepth The query start depth
     * @param endDepth The query end depth
     */
    constructor(dataInfo: IEdgeHistorianDataInfo, startDepth?: number, endDepth?: number);
}
/**
 * An implementation of [[IHistorianRecordWriteRowsQuery]] used to add/update rows to a record/descriptor
 * Extends [[EdgeHistorianDataQueryBase]] which contains common properties for historian queries
 * NOTE: Rows will only update if the index variable(s) match an existing row
 */
export declare class HistorianRecordWriteRowsQuery extends EdgeHistorianDataQueryBase implements IHistorianRecordWriteRowsQuery {
    /**
     * The type of the query.  This property is read only
     */
    readonly type: EdgeHistorianDataQueryType;
    /**
     * Disables real-time broadcast flag for this write
     */
    disableRealTime: boolean;
    /** Row(s) of data organized by the variables array */
    data: any[][];
    /**
     * Constructs a HistorianRecordWriteRowsQuery Object
     * @param dataInfo Metadata describing the record/descriptor/variables to query
     * @param data Row(s) of data organized by the variables array
     * @param disableRealTime Disables real-time broadcast flag for this write
     */
    constructor(dataInfo: IEdgeHistorianDataInfo, data: any[][], disableRealTime?: boolean);
}
/**
 * Types of queries available to get data from the historian
 */
export declare enum EdgeHistorianDataQueryType {
    LAST_ROW = "LastRow",
    MULTI_ROW = "MultiRow",
    TIME_BASED = "TimeBased",
    DEPTH_BASED = "DepthBased",
    WRITE_ROWS = "WriteRows"
}
/**
 * Types of serach direction available for supported queries
 */
export declare enum EdgeHistorianQuerySearchDirection {
    UP = "Up",
    DOWN = "Down"
}
//# sourceMappingURL=edgeHistorianDataQuery.d.ts.map