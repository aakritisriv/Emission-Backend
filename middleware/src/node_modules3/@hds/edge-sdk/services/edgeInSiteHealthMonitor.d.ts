import { Observable } from 'rxjs';
import { IEdgeHistorianDataSubscriptionsStatus } from '../historian';
import { IBridgeStatusMessage, IInsiteInfo } from './../models/historian/edgeApiResponses';
import { EdgeInsiteRtClient } from './edgeInsiteRtClient';
import { IMqttClientService } from './common/mqtt.client';
export declare class EdgeInSiteHealthMonitor {
    topic: string;
    status: IBridgeStatusMessage;
    subscriptionsHealthStatus: Observable<IEdgeHistorianDataSubscriptionsStatus>;
    readonly primaryChangeTopic = "Edge/OSH/Events/InsiteBridgeAddress/Current/primary";
    private readonly oshStatesTopic;
    private readonly oshModulesTopic;
    isInsiteConnected: boolean;
    isBridgeRunning: boolean;
    private statusObject;
    private inSiteInfo;
    private mqttClient;
    private insiteRtClient;
    private lastAliveTimestamp;
    private bridgeAliveInterval;
    private bridgeCheckInterval;
    private healthCheckInterval;
    private suspendEmitConnectionStatus;
    private _subscriptionsHealthStatus;
    constructor(mqttClient: IMqttClientService, insiteRtClient: EdgeInsiteRtClient);
    onBridgeStatus(status: IBridgeStatusMessage): void;
    subscribeToBridgeStatus(inSiteInfo: IInsiteInfo): void;
    updateStatusChanged(): void;
    onBridgeResetConnection(): Promise<void>;
    private setNoConnectionStatus;
    private emitConnectionStatus;
    private getAliveTopic;
    private checkIfBridgeAlive;
    private restore;
}
//# sourceMappingURL=edgeInSiteHealthMonitor.d.ts.map