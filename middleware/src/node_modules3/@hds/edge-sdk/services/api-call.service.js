"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiCallsService = void 0;
const axios_1 = __importDefault(require("axios"));
const __1 = require("..");
class ApiCallsService {
    constructor(httpsAgent) {
        this.httpsAgent = httpsAgent;
    }
    async get(url, params = null) {
        return new Promise((resolve, reject) => {
            axios_1.default
                .get(url, {
                timeout: 20000,
                httpsAgent: this.httpsAgent,
                proxy: false,
                params,
            })
                .then((response) => {
                resolve(response.data);
            })
                .catch((error) => {
                __1.LogService.log(__1.LOG_LEVEL.ERROR, `GET error: ${error.message}. URL: ${error.config ? error.config.url : ''}`);
                reject(error);
            });
        });
    }
    async post(url, data = null, params = null) {
        return new Promise((resolve, reject) => {
            axios_1.default
                .post(url, data, {
                timeout: 20000,
                httpsAgent: this.httpsAgent,
                proxy: false,
                params,
            })
                .then((response) => {
                resolve(response.data);
            })
                .catch((error) => {
                __1.LogService.log(__1.LOG_LEVEL.ERROR, `POST error: ${error.message}. URL: ${error.config ? error.config.url : ''}`);
                reject(error);
            });
        });
    }
    async put(url, data = null, params = null) {
        return new Promise((resolve, reject) => {
            axios_1.default
                .put(url, data, {
                timeout: 20000,
                httpsAgent: this.httpsAgent,
                proxy: false,
                params,
            })
                .then((response) => {
                resolve(response.data);
            })
                .catch((error) => {
                __1.LogService.log(__1.LOG_LEVEL.ERROR, `PUT error: ${error.message}. URL: ${error.config ? error.config.url : ''}`);
                reject(error);
            });
        });
    }
    async delete(url, params = null) {
        return new Promise((resolve, reject) => {
            axios_1.default
                .delete(url, {
                timeout: 20000,
                httpsAgent: this.httpsAgent,
                proxy: false,
                params,
            })
                .then((response) => {
                resolve(response.data);
            })
                .catch((error) => {
                __1.LogService.log(__1.LOG_LEVEL.ERROR, `'DELETE error: ${error.message}. URL: ${error.config ? error.config.url : ''}`);
                reject(error);
            });
        });
    }
}
exports.ApiCallsService = ApiCallsService;
