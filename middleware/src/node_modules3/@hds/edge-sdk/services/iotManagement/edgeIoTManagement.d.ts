/// <reference types="node" />
import { EventEmitter } from 'events';
import * as https from 'https';
import { Observable } from 'rxjs';
import { IEndpointsConfig } from '../../models/common/endpoints.config';
import { IEdgeIoTDataSourceStatus } from '../../models/iotManagement/edge-iot-data-source.model';
import { IEdgeIotConnectionState, IEdgeIotModule, IEdgeIotModuleError } from '../../models/iotManagement/iot-management.model';
import { IUmsMeta } from '../../models/iotManagement/ums-meta.model';
import { IServiceProvider } from '../common/service.provider';
import { IEdgeIotManagementSDK } from './../edgeSDK';
export declare class EdgeIoTManagement implements IEdgeIotManagementSDK {
    connectivityState: EventEmitter;
    readonly stateEventName = "newState";
    private healthMonitor;
    private sensors;
    private publishers;
    private configProvider;
    private apiCallsService;
    private factory;
    private _cachedState;
    private sensorsBase;
    private publishersBase;
    private edgePersistence;
    private serviceProvider;
    private endpoints;
    private httpsAgent;
    private initialized;
    constructor(endpoints: IEndpointsConfig, serviceProvider: IServiceProvider, httpsAgent: https.Agent);
    getIoTHealthStatus(): Observable<IEdgeIoTDataSourceStatus>;
    getSensors(): IEdgeIotModule[];
    getPublishers(): IEdgeIotModule[];
    start(): Promise<void>;
    stop(): Promise<void>;
    reset(): Promise<void>;
    delete(): Promise<void>;
    updateStates(updateItems: IEdgeIotModule[]): void;
    checkModulesList(modulesList: IEdgeIotModule[]): void;
    updateErrors(updateItems: IEdgeIotModuleError[]): void;
    getConnectivityState(): IEdgeIotConnectionState;
    getPublishersMeta(): Promise<IUmsMeta[]>;
    private getServiceMetaFromOsh;
    private initialize;
    private loadSensors;
    private updateModuleStates;
    private checkFixedSensors;
    private cleanUpSensors;
    private cleanUpPublishers;
    private mapSensorOfResponse;
    private mapPublisherOfResponse;
    private overlap;
    private loadPublishers;
    private setStateToAll;
    private getFullCollection;
    private updateConnectivityState;
    private findAndUpdate;
    private updateState;
    private findAndUpdateError;
    private setStateToItems;
    private createSensors;
    private createPublishers;
    private getSensorConfigs;
    private getPublisherConfigs;
}
//# sourceMappingURL=edgeIoTManagement.d.ts.map