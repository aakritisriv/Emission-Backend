/// <reference types="node" />
import * as https from 'https';
import { Observable } from 'rxjs';
import { IBridgeStatusMessage } from '../../models/historian/edgeApiResponses';
import { IEdgeIoTDataSourceStatus } from '../../models/iotManagement/edge-iot-data-source.model';
import { ApiCallsService } from '../api-call.service';
import { EdgeIoTManagement } from './edgeIoTManagement';
import { IEndpointsConfig } from '../../models/common/endpoints.config';
import { IServiceProvider } from '../common/service.provider';
export declare class EdgeIoTManagementHealthMonitor {
    bridgeHealthTopic: string;
    status: IBridgeStatusMessage;
    iotHealthStatus: Observable<IEdgeIoTDataSourceStatus>;
    isInsiteConnected: boolean;
    isBridgeRunning: boolean;
    get isMqttConnected$(): Observable<boolean>;
    readonly primaryChangeTopic = "Edge/OSH/Events/InsiteBridgeAddress/Current/primary";
    private readonly oshStatesTopic;
    private readonly oshModulesTopic;
    private apiCallsService;
    private iotManagement;
    private endpoints;
    private statusObject;
    private _iotHealthStatus;
    private mqttClient;
    private httpsAgent;
    private primaryBridgeInfo;
    private lastAliveTimestamp;
    private bridgeAliveInterval;
    private bridgeCheckInterval;
    private healthCheckInterval;
    private suspendEmitConnectionStatus;
    private serviceProvider;
    constructor(endpoints: IEndpointsConfig, iotManagement: EdgeIoTManagement, apiCallsService: ApiCallsService, httpsAgent: https.Agent, serviceProvider: IServiceProvider);
    startTracking(): void;
    private initializeMQTTClient;
    private initializeStateTracking;
    private initializeDataStatus;
    private setupMqttOptions;
    private subscribeToBridgeStatus;
    private updateStatusChanged;
    private mapWithIoTStatus;
    private onBridgeResetConnection;
    private setNoConnectionStatus;
    private emitConnectionStatus;
    private getAliveTopic;
    private checkIfBridgeAlive;
    private onBridgeStatus;
    private setPrimaryBridgeInfo;
    private getBridgeId;
}
//# sourceMappingURL=iot-management-health.service.d.ts.map