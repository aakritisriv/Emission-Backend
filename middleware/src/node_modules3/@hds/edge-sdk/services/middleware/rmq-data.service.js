"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RmqDataService = void 0;
const __1 = require("../..");
class RmqDataService {
    constructor(dataProcessor, rabbitMq, rabbitMqConfig) {
        this.publishChannel = 'commonMiddleware';
        this.dataProcessor = dataProcessor;
        this.rabbitMq = rabbitMq;
        this.rabbitMqConfig = rabbitMqConfig;
        this.rabbitMq.setupChannelForPublishingMessages(this.rabbitMqConfig.publisherConfig, this.publishChannel);
        rabbitMqConfig.subscriberConfig.forEach((subscribe) => {
            this.rabbitMq.subscribeToMessages(subscribe, (msg) => {
                this.onMessage(msg, subscribe.routingKey);
            });
        });
    }
    sendDataToDefault(data, routingKey) {
        if (data == null) {
            throw Error('data to publish has no value');
        }
        const defaultConfig = this.rabbitMqConfig.publisherConfig;
        if (!defaultConfig) {
            throw Error('No config for RMQ publisher provided in common middleware');
        }
        __1.LogService.log(__1.LOG_LEVEL.DATA_OUTPUT, `RMQ publish to ${defaultConfig.exchange} / ${routingKey}: ${JSON.stringify(data)}`);
        this.rabbitMq.publishData(this.publishChannel, data, routingKey !== null && routingKey !== void 0 ? routingKey : this.rabbitMqConfig.publisherConfig.routingKey);
    }
    onMessage(msg, routingKey) {
        const message = `${routingKey} : ${JSON.stringify(msg.variables)} ${JSON.stringify(msg.data[0])}`;
        __1.LogService.log(__1.LOG_LEVEL.DATA_INPUT, message);
        this.dataProcessor.processMessage(msg);
    }
}
exports.RmqDataService = RmqDataService;
