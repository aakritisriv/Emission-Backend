import { Observable } from 'rxjs';
import { IDatabaseConnection } from '../../db/databaseConnection';
import { IDataSubscription } from '../../models/middleware/data-subscription.model';
import { IWebSocketService } from '../common/web-socket.service';
/**
 * Enables data grouping for specific user(UI) needs
 * so API and WebSocket supports data retrieving and updates for
 * specific variables scope not sending all cached data
 */
export interface IDataSubscriptionManager {
    /**
     * Fired on subscriptions data loaded from DB if configured
     */
    readonly initialized$: Observable<IDataSubscription[]>;
    /**
     * Fired on new subscription info added
     */
    readonly subscriptionAdded$: Observable<IDataSubscription>;
    /**
     * Fired on subscription info removed
     */
    readonly subscriptionRemoved$: Observable<IDataSubscription>;
    /**
     * Add new subscription for data grouping
     * @param dataSubscription info required to add subscription
     */
    addSubscription(dataSubscription: IDataSubscription): void;
    /**
     * Remove subscription
     * @param uniqueName string identifier of subscription provided when added
     */
    removeSubscription(uniqueName: string): void;
    /**
     * Retrieve all registered subscriptions info
     */
    getSubscriptions(): IDataSubscription[];
    /**
     * Retrieve specific subscription info
     * @param uniqueName string identifier of subscription provided when added
     */
    getSubscriptionInfo(uniqueName: string): IDataSubscription;
}
/**
 * Enables data grouping for specific user(UI) needs
 * so API and WebSocket supports data retrieving and updates for
 * specific variables scope not sending all cached data
 */
export declare class DataSubscriptionManager implements IDataSubscriptionManager {
    /**
     * Fired on subscriptions data loaded from DB if configured
     */
    readonly initialized$: Observable<IDataSubscription[]>;
    /**
     * Fired on new subscription info added
     */
    readonly subscriptionAdded$: Observable<IDataSubscription>;
    /**
     * Fired on subscription info removed
     */
    readonly subscriptionRemoved$: Observable<IDataSubscription>;
    private readonly _initialized;
    private readonly _subscriptionAdded;
    private readonly _subscriptionRemoved;
    private subscriptions;
    private db?;
    private webSocket?;
    constructor(dbConnection?: IDatabaseConnection, webSocket?: IWebSocketService);
    /**
     * Add new subscription for data grouping
     * @param dataSubscription info required to add subscription
     */
    addSubscription(dataSubscription: IDataSubscription): void;
    /**
     * Remove subscription
     * @param uniqueName string identifier of subscription provided when added
     */
    removeSubscription(uniqueName: string): void;
    /**
     * Retrieve all registered subscriptions info
     */
    getSubscriptions(): IDataSubscription[];
    /**
     * Retrieve specific subscription info
     * @param uniqueName string identifier of subscription provided when added
     */
    getSubscriptionInfo(uniqueName: string): IDataSubscription;
}
//# sourceMappingURL=data-subscription-manager.d.ts.map