"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigProvider = void 0;
const endpoints_config_1 = require("../../models/common/endpoints.config");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
class ConfigProvider {
    constructor() {
        this.INTERNAL_EDGE_API_HOST = 'edge-api';
        this.INTERNAL_EDGE_MQTT_HOST = 'mqtt';
        this.INTERNAL_EDGE_IOT_HOST = 'iot-gateway-osh';
        this.INTERNAL_EDGE_PORT = '10000';
        this.INTERNAL_CONFIG_PATH = 'config.json';
        this.config = new endpoints_config_1.EndpointsConfig();
    }
    getEndpoints(config) {
        this.initEndpoints();
        config.configFilePath = process.env.CONFIG_PATH || config.configFilePath || this.INTERNAL_CONFIG_PATH;
        const jsonConfig = this.readConfigFile(config.configFilePath);
        // ENV variable || JSON config || constructor config || internal hardcoded value
        config.edgeApiHost =
            process.env.EDGE_API_HOST || (jsonConfig === null || jsonConfig === void 0 ? void 0 : jsonConfig.edgeApiHost) || config.edgeApiHost || this.INTERNAL_EDGE_API_HOST;
        config.edgeIoTHost =
            process.env.EDGE_IOT_HOST || (jsonConfig === null || jsonConfig === void 0 ? void 0 : jsonConfig.edgeIoTHost) || config.edgeIoTHost || this.INTERNAL_EDGE_IOT_HOST;
        config.edgeIoTPort =
            process.env.EDGE_IOT_PORT || (jsonConfig === null || jsonConfig === void 0 ? void 0 : jsonConfig.edgeIoTPort) || config.edgeIoTPort || this.INTERNAL_EDGE_PORT;
        config.mongoConnection = process.env.MONGO_CONNECTION || (jsonConfig === null || jsonConfig === void 0 ? void 0 : jsonConfig.mongoConnection) || config.mongoConnection;
        this.config.mongoConnection = config.mongoConnection;
        config.rabbitConnection = process.env.RABBIT_CONNECTION || (jsonConfig === null || jsonConfig === void 0 ? void 0 : jsonConfig.rabbitConnection) || config.rabbitConnection;
        this.config.rabbitConnection = config.rabbitConnection;
        /*
                In the interest of having users of this sdk enter less params,
                dynamically check to see if the edgeApiHost matches our internal
                swarm hostname for the edge api. If so, assume the MQTT host is
                the internal dns name as well unless otherwise overwritten
            */
        config.edgeMqttHost = process.env.EDGE_MQTT_HOST || (jsonConfig === null || jsonConfig === void 0 ? void 0 : jsonConfig.edgeMqttHost) || config.edgeMqttHost;
        if (config.edgeMqttHost == undefined) {
            if (this.INTERNAL_EDGE_API_HOST == (jsonConfig === null || jsonConfig === void 0 ? void 0 : jsonConfig.edgeApiHost) || this.INTERNAL_EDGE_API_HOST == config.edgeApiHost) {
                config.edgeMqttHost = this.INTERNAL_EDGE_MQTT_HOST;
            }
            else {
                config.edgeMqttHost = (jsonConfig === null || jsonConfig === void 0 ? void 0 : jsonConfig.edgeApiHost) || config.edgeApiHost;
            }
        }
        if (config.edgeIoTPort != null) {
            config.edgeIoTHost = `${config.edgeIoTHost}:${config.edgeIoTPort}`;
        }
        config.disableStreaming =
            process.env.DISABLE_STREAMING != undefined || (jsonConfig === null || jsonConfig === void 0 ? void 0 : jsonConfig.disableStreaming) ||
                config.disableStreaming ||
                undefined;
        config.secure = process.env.EDGE_API_SECURE != undefined || (jsonConfig === null || jsonConfig === void 0 ? void 0 : jsonConfig.secure) || config.secure;
        config.certFile = process.env.EDGE_TLS_CERT_FILE || (jsonConfig === null || jsonConfig === void 0 ? void 0 : jsonConfig.certFile) || config.certFile;
        config.keyFile = process.env.EDGE_TLS_KEY_FILE || (jsonConfig === null || jsonConfig === void 0 ? void 0 : jsonConfig.keyFile) || config.keyFile;
        config.caFile = process.env.EDGE_TLS_CA_FILE || (jsonConfig === null || jsonConfig === void 0 ? void 0 : jsonConfig.caFile) || config.caFile;
        config.edgeApiPort = process.env.EDGE_API_PORT || (jsonConfig === null || jsonConfig === void 0 ? void 0 : jsonConfig.edgeApiPort) || config.edgeApiPort || undefined;
        config.edgeMqttPort = process.env.EDGE_MQTT_PORT || (jsonConfig === null || jsonConfig === void 0 ? void 0 : jsonConfig.edgeMqttPort) || config.edgeMqttPort || undefined;
        const securePref = config.secure ? 's' : '';
        this.config.edgeApiAddress = `http${securePref}://${config.edgeApiHost}`;
        this.config.iotManagement.baseIoTAddress = `http${securePref}://${config.edgeIoTHost}`;
        this.config.mqttConnectionString = `mqtt${securePref}://${config.edgeMqttHost}`;
        if (config.edgeApiPort != undefined) {
            this.config.edgeApiAddress += `:${config.edgeApiPort}`;
        }
        if (config.edgeMqttPort != undefined) {
            this.config.mqttConnectionString += `:${config.edgeMqttPort}`;
        }
        return this.config;
    }
    initEndpoints() {
        this.config.edgeBridgeApiBase = '/api/v1/services/insite';
        this.config.iotManagement = {
            baseIoTAddress: undefined,
            api_uri: '/sensorhub/edge/configuration/api/v1/',
            sensors_uri: 'sensors',
            services_uri: 'services',
            ums_meta: 'meta/config/list',
        };
    }
    readConfigFile(fileName) {
        const location = path.resolve('.', fileName);
        if (fs.existsSync(location)) {
            return JSON.parse(fs.readFileSync(location).toString());
        }
    }
}
exports.ConfigProvider = ConfigProvider;
