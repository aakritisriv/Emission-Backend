/// <reference types="node" />
import * as https from 'https';
import { ISubscriptionMap } from 'mqtt';
import { Observable, Subject } from 'rxjs';
import { PacketCallback } from 'mqtt/types/lib/client';
export interface IMqttClientService {
    isConnected$: Observable<boolean>;
    isConnected: boolean;
    message$: Subject<IMqttMessage>;
    subscribe(topic: string | string[] | ISubscriptionMap): void;
    unsubscribe(topic: string | string[], callback?: PacketCallback): void;
    publish(topic: string, message: string | Buffer): void;
}
interface IMqttMessage {
    topic: string;
    message: Buffer;
}
export declare class MqttClientService implements IMqttClientService {
    readonly message$: Subject<IMqttMessage>;
    readonly isConnected$: Observable<boolean>;
    get isConnected(): boolean;
    private _isConnected$;
    private client;
    constructor(mqttConnectionString: string, httpsAgent?: https.Agent);
    subscribe(topic: string | string[] | ISubscriptionMap): void;
    unsubscribe(topic: string | string[], callback?: PacketCallback): void;
    publish(topic: string, message: string | Buffer): void;
    private init;
}
export {};
//# sourceMappingURL=mqtt.client.d.ts.map