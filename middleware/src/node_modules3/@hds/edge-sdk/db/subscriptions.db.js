"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriptionsDB = void 0;
const mongoose_1 = require("mongoose");
class SubscriptionsDB {
    constructor(db) {
        this._subscriptionSchema = new mongoose_1.Schema({
            uniqueName: { type: String, required: true },
            variables: { type: Array, required: true },
        });
        this.db = db;
        this.subscriptionModel = this.db.mongoose.model('subscription', this._subscriptionSchema);
    }
    async cacheSubscription(subscription) {
        try {
            await this.subscriptionModel.findOneAndUpdate({ uniqueName: subscription.uniqueName }, subscription, {
                upsert: true,
            });
        }
        catch (error) {
            console.error('On cache subscription attempt:', error.message);
        }
    }
    async removeSubscription(uniqueName) {
        try {
            await this.subscriptionModel.deleteOne({ uniqueName });
        }
        catch (error) {
            console.error('On delete subscription attempt:', error.message);
        }
    }
    async getCachedSubscriptions() {
        try {
            const docs = await this.subscriptionModel.find({});
            if (!docs) {
                throw Error(`Can not find any cached subscription in DB`);
            }
            const mappedArray = [];
            docs.forEach((doc) => {
                mappedArray.push(doc.toObject());
            });
            return mappedArray;
        }
        catch (error) {
            console.error('on getCacheEdgeData attempt:', error.message);
        }
    }
}
exports.SubscriptionsDB = SubscriptionsDB;
