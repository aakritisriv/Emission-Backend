"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IotManagementDB = void 0;
const iotManagementDB_model_1 = require("./iotManagementDB.model");
const resultStatusObject_1 = require("../models/api/resultStatusObject");
const mongoose_1 = require("mongoose");
class IotManagementDB {
    constructor(db) {
        this._edgeIoTModuleSchema = new mongoose_1.Schema({
            timestamp: { type: Number, required: true },
            services: { type: Array, required: true },
            sensors: { type: Array, required: true },
        });
        this.db = db;
        this.edgeIotModule = this.db.mongoose.model('EdgeIotModule', this._edgeIoTModuleSchema);
    }
    async setIoTModule(iotModule) {
        const result = { status: resultStatusObject_1.ResultStatus.OK, result: false, message: '' };
        const newOshModule = new this.edgeIotModule(iotModule);
        return await newOshModule
            .save()
            .then((doc) => {
            result.message = 'Edge IoT module added to Mongo DB.';
            result.result = true;
            return result;
        })
            .catch((err) => {
            this.db.setErrorResult(`Error writing Edge IoT module to DB: ${err.message}`, result);
            return result;
        });
    }
    async updateIoTServiceModule(iotModule) {
        const result = { status: resultStatusObject_1.ResultStatus.OK, result: false, message: '' };
        return await this.edgeIotModule.findOneAndUpdate({}, { $set: { services: iotModule.services } })
            .then((doc) => {
            if (doc) {
                result.message = 'Edge IoT service module to Mongo DB.';
                result.result = true;
            }
            return result;
        })
            .catch((err) => {
            this.db.setErrorResult(`Error writing Edge IoT service module to DB: ${err.message}`, result);
            return result;
        });
    }
    async updateIoTSensorModule(iotModule) {
        const result = { status: resultStatusObject_1.ResultStatus.OK, result: false, message: '' };
        try {
            const doc = await this.edgeIotModule.findOneAndUpdate({}, { $set: { sensors: iotModule.sensors } });
            if (doc) {
                result.message = 'Edge IoT sensor module to Mongo DB.';
                result.result = true;
            }
            return result;
        }
        catch (error) {
            this.db.setErrorResult(`Error writing Edge IoT sensor module to DB: ${error.message}`, result);
            return result;
        }
    }
    async isIoTModuleExists() {
        const result = await this.edgeIotModule.findOne({}, {}, { sort: { timestamp: -1 } });
        return result ? true : false;
    }
    async getIoTModule(property) {
        const result = { status: resultStatusObject_1.ResultStatus.OK, result: [], message: '' };
        try {
            const doc = await this.edgeIotModule.findOne({}, {}, { sort: { timestamp: -1 } });
            if (doc) {
                result.result = property === iotManagementDB_model_1.IoTModuleProperty.Sensors ? doc.toObject().sensors : doc.toObject().services;
                if (result.result === undefined) {
                    result.status = resultStatusObject_1.ResultStatus.ERROR;
                    result.message = 'CRITICAL: Edge IoT module could not be parsed';
                    return result;
                }
                return result;
            }
            else {
                this.db.setErrorResult('Warning: No Edge IoT module in Mongo DB.', result, resultStatusObject_1.ResultStatus.WARNING);
                return result;
            }
        }
        catch (err) {
            this.db.setErrorResult(`Error Reading Data from Mongo: ${err.message}`, result, resultStatusObject_1.ResultStatus.ERROR);
            return result;
        }
    }
}
exports.IotManagementDB = IotManagementDB;
