"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataCacheDB = void 0;
const mongoose_1 = require("mongoose");
const data_processor_service_1 = require("../services/middleware/data-processor.service");
class DataCacheDB {
    constructor(db) {
        this._dataCacheSchema = new mongoose_1.Schema({
            variables: { type: Array, required: true },
            data: { type: Array, required: true },
        });
        this.db = db;
        this.cacheModel = this.db.mongoose.model(data_processor_service_1.DataProcessor.messageName, this._dataCacheSchema);
    }
    async cacheEdgeData(cacheData) {
        const model = this.cacheModel;
        try {
            await model.findOneAndUpdate({}, cacheData, { upsert: true });
        }
        catch (error) {
            console.error('On cache data attempt:', error.message);
        }
    }
    async getCacheEdgeData() {
        const model = this.cacheModel;
        try {
            const doc = await model.findOne();
            if (!doc) {
                return;
            }
            const obj = doc.toObject();
            return obj;
        }
        catch (error) {
            console.error('on getCacheEdgeData attempt:', error.message);
        }
    }
}
exports.DataCacheDB = DataCacheDB;
